"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
var message_object_1 = require("./message-object");
exports.MessageObject = message_object_1.MessageObject;
tslib_1.__exportStar(require("./cast"), exports);
tslib_1.__exportStar(require("./element-listener"), exports);
exports.MAIN_MENU_LABEL = 'Haskell IDE';
function getEventType(detail) {
    if (detail &&
        (detail.contextCommand || (detail[0] && detail[0].contextCommand))) {
        return "context";
    }
    else {
        return "keyboard";
    }
}
exports.getEventType = getEventType;
function bufferPositionFromMouseEvent(editor, event) {
    const sp = atom.views.getView(editor).component.screenPositionForMouseEvent(event);
    if (isNaN(sp.row) || isNaN(sp.column)) {
        return undefined;
    }
    return editor.bufferPositionForScreenPosition(sp);
}
exports.bufferPositionFromMouseEvent = bufferPositionFromMouseEvent;
function handlePromise(promise) {
    if (typeof promise.catch !== 'function') {
        atom.notifications.addFatalError('Atom-Typescript: non-promise passed to handlePromise. Please report this.', {
            stack: new Error().stack,
            dismissable: true,
        });
        return;
    }
    promise.catch((err) => {
        atom.notifications.addFatalError(`Atom-Typescript error: ${err.message}`, {
            detail: err.toString(),
            stack: err.stack,
            dismissable: true,
        });
    });
}
exports.handlePromise = handlePromise;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBSUEsbURBQWdEO0FBQXZDLHlDQUFBLGFBQWEsQ0FBQTtBQUN0QixpREFBc0I7QUFDdEIsNkRBQWtDO0FBRXJCLFFBQUEsZUFBZSxHQUFHLGFBQWEsQ0FBQTtBQUU1QyxTQUFnQixZQUFZLENBQUMsTUFBVztJQUN0QyxJQUNFLE1BQU07UUFDTixDQUFDLE1BQU0sQ0FBQyxjQUFjLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQ2xFO1FBQ0EsaUJBQThCO0tBQy9CO1NBQU07UUFDTCxrQkFBK0I7S0FDaEM7QUFDSCxDQUFDO0FBVEQsb0NBU0M7QUFHRCxTQUFnQiw0QkFBNEIsQ0FDMUMsTUFBa0IsRUFDbEIsS0FBaUI7SUFFakIsTUFBTSxFQUFFLEdBQVcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQ25DLE1BQU0sQ0FDQyxDQUFDLFNBQVMsQ0FBQywyQkFBMkIsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUN0RCxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUNyQyxPQUFPLFNBQVMsQ0FBQTtLQUNqQjtJQUNELE9BQU8sTUFBTSxDQUFDLCtCQUErQixDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ25ELENBQUM7QUFYRCxvRUFXQztBQUVELFNBQWdCLGFBQWEsQ0FBQyxPQUFxQjtJQUVqRCxJQUFJLE9BQU8sT0FBTyxDQUFDLEtBQUssS0FBSyxVQUFVLEVBQUU7UUFDdkMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQzlCLDJFQUEyRSxFQUMzRTtZQUNFLEtBQUssRUFBRSxJQUFJLEtBQUssRUFBRSxDQUFDLEtBQUs7WUFDeEIsV0FBVyxFQUFFLElBQUk7U0FDbEIsQ0FDRixDQUFBO1FBQ0QsT0FBTTtLQUNQO0lBQ0QsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQVUsRUFBRSxFQUFFO1FBQzNCLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLDBCQUEwQixHQUFHLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDeEUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxRQUFRLEVBQUU7WUFDdEIsS0FBSyxFQUFFLEdBQUcsQ0FBQyxLQUFLO1lBQ2hCLFdBQVcsRUFBRSxJQUFJO1NBQ2xCLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQW5CRCxzQ0FtQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQb2ludCwgVGV4dEVkaXRvciB9IGZyb20gJ2F0b20nXG5pbXBvcnQgKiBhcyBVUEkgZnJvbSAnYXRvbS1oYXNrZWxsLXVwaSdcbmltcG9ydCBURXZlbnRSYW5nZVR5cGUgPSBVUEkuVEV2ZW50UmFuZ2VUeXBlXG5cbmV4cG9ydCB7IE1lc3NhZ2VPYmplY3QgfSBmcm9tICcuL21lc3NhZ2Utb2JqZWN0J1xuZXhwb3J0ICogZnJvbSAnLi9jYXN0J1xuZXhwb3J0ICogZnJvbSAnLi9lbGVtZW50LWxpc3RlbmVyJ1xuXG5leHBvcnQgY29uc3QgTUFJTl9NRU5VX0xBQkVMID0gJ0hhc2tlbGwgSURFJ1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXZlbnRUeXBlKGRldGFpbDogYW55KSB7XG4gIGlmIChcbiAgICBkZXRhaWwgJiZcbiAgICAoZGV0YWlsLmNvbnRleHRDb21tYW5kIHx8IChkZXRhaWxbMF0gJiYgZGV0YWlsWzBdLmNvbnRleHRDb21tYW5kKSlcbiAgKSB7XG4gICAgcmV0dXJuIFRFdmVudFJhbmdlVHlwZS5jb250ZXh0XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFRFdmVudFJhbmdlVHlwZS5rZXlib2FyZFxuICB9XG59XG5cbi8vIHNjcmVlbiBwb3NpdGlvbiBmcm9tIG1vdXNlIGV2ZW50XG5leHBvcnQgZnVuY3Rpb24gYnVmZmVyUG9zaXRpb25Gcm9tTW91c2VFdmVudChcbiAgZWRpdG9yOiBUZXh0RWRpdG9yLFxuICBldmVudDogTW91c2VFdmVudCxcbikge1xuICBjb25zdCBzcDogUG9pbnQgPSAoYXRvbS52aWV3cy5nZXRWaWV3KFxuICAgIGVkaXRvcixcbiAgKSBhcyBhbnkpLmNvbXBvbmVudC5zY3JlZW5Qb3NpdGlvbkZvck1vdXNlRXZlbnQoZXZlbnQpXG4gIGlmIChpc05hTihzcC5yb3cpIHx8IGlzTmFOKHNwLmNvbHVtbikpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbiAgcmV0dXJuIGVkaXRvci5idWZmZXJQb3NpdGlvbkZvclNjcmVlblBvc2l0aW9uKHNwKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlUHJvbWlzZShwcm9taXNlOiBQcm9taXNlPGFueT4pOiB2b2lkIHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnN0cmljdC10eXBlLXByZWRpY2F0ZXMgbm8tdW5ib3VuZC1tZXRob2RcbiAgaWYgKHR5cGVvZiBwcm9taXNlLmNhdGNoICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZEZhdGFsRXJyb3IoXG4gICAgICAnQXRvbS1UeXBlc2NyaXB0OiBub24tcHJvbWlzZSBwYXNzZWQgdG8gaGFuZGxlUHJvbWlzZS4gUGxlYXNlIHJlcG9ydCB0aGlzLicsXG4gICAgICB7XG4gICAgICAgIHN0YWNrOiBuZXcgRXJyb3IoKS5zdGFjayxcbiAgICAgICAgZGlzbWlzc2FibGU6IHRydWUsXG4gICAgICB9LFxuICAgIClcbiAgICByZXR1cm5cbiAgfVxuICBwcm9taXNlLmNhdGNoKChlcnI6IEVycm9yKSA9PiB7XG4gICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZEZhdGFsRXJyb3IoYEF0b20tVHlwZXNjcmlwdCBlcnJvcjogJHtlcnIubWVzc2FnZX1gLCB7XG4gICAgICBkZXRhaWw6IGVyci50b1N0cmluZygpLFxuICAgICAgc3RhY2s6IGVyci5zdGFjayxcbiAgICAgIGRpc21pc3NhYmxlOiB0cnVlLFxuICAgIH0pXG4gIH0pXG59XG4iXX0=