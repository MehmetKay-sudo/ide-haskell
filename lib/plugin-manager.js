"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const results_db_1 = require("./results-db");
const config_params_1 = require("./config-params");
const editor_control_1 = require("./editor-control");
const linter_support_1 = require("./linter-support");
const tooltip_registry_1 = require("./tooltip-registry");
const check_results_provider_1 = require("./check-results-provider");
const status_bar_1 = require("./status-bar");
const prettify_1 = require("./prettify");
const editor_mark_control_1 = require("./editor-mark-control");
class PluginManager {
    constructor(state, outputPanel) {
        this.outputPanel = outputPanel;
        this.disposables = new atom_1.CompositeDisposable();
        this.emitter = new atom_1.Emitter();
        this.controllers = new Map();
        this.onWillSaveBuffer = (callback) => this.emitter.on('will-save-buffer', callback);
        this.onDidSaveBuffer = (callback) => this.emitter.on('did-save-buffer', callback);
        this.onDidStopChanging = (callback) => this.emitter.on('did-stop-changing', callback);
        this.disposables.add(this.emitter);
        this.resultsDB = new results_db_1.ResultsDB();
        this.outputPanel.connectResults(this.resultsDB);
        this.tooltipRegistry = new tooltip_registry_1.TooltipRegistry(this);
        this.configParamManager = new config_params_1.ConfigParamManager(this.outputPanel, state.configParams);
        this.disposables.add(this.addEditorController(editor_control_1.EditorControl), this.addEditorController(prettify_1.PrettifyEditorController), this.addEditorController(editor_mark_control_1.EditorMarkControl));
        if (atom.config.get('ide-haskell.messageDisplayFrontend') === 'builtin') {
            this.checkResultsProvider = new check_results_provider_1.CheckResultsProvider(this);
        }
        this.subscribeEditorController();
    }
    deactivate() {
        this.resultsDB.destroy();
        this.disposables.dispose();
        if (this.checkResultsProvider)
            this.checkResultsProvider.destroy();
        this.outputPanel.reallyDestroy();
        this.configParamManager.destroy();
        this.removeStatusBar();
        if (this.linterSupport) {
            this.linterSupport.destroy();
            this.linterSupport = undefined;
        }
    }
    serialize() {
        return {
            configParams: this.configParamManager.serialize(),
        };
    }
    willSaveBuffer(buffer) {
        return this.emitter.emit('will-save-buffer', buffer);
    }
    didSaveBuffer(buffer) {
        return this.emitter.emit('did-save-buffer', buffer);
    }
    didStopChanging(buffer) {
        return this.emitter.emit('did-stop-changing', buffer);
    }
    togglePanel() {
        atom.workspace.toggle(this.outputPanel);
    }
    controller(editor) {
        return this.controllerType(editor_control_1.EditorControl, editor);
    }
    controllerType(factory, editor) {
        const ecmap = this.controllers.get(factory);
        const rec = ecmap ? ecmap.get(editor) : undefined;
        return rec ? rec.controller : undefined;
    }
    setLinter(linter) {
        if (atom.config.get('ide-haskell.messageDisplayFrontend') !== 'linter') {
            return;
        }
        this.linterSupport = new linter_support_1.LinterSupport(linter, this.resultsDB);
    }
    nextError() {
        if (atom.config.get('ide-haskell.messageDisplayFrontend') !== 'builtin') {
            return;
        }
        this.outputPanel.showNextError();
    }
    prevError() {
        if (atom.config.get('ide-haskell.messageDisplayFrontend') !== 'builtin') {
            return;
        }
        this.outputPanel.showPrevError();
    }
    backendStatus(pluginName, st) {
        this.outputPanel.backendStatus(pluginName, st);
        if (this.statusBarView) {
            this.statusBarView.backendStatus(pluginName, st);
        }
    }
    addEditorController(factory) {
        if (this.controllers.has(factory)) {
            throw new Error(`Duplicate controller factory ${factory.toString()}`);
        }
        const map = new WeakMap();
        this.controllers.set(factory, map);
        return new atom_1.Disposable(() => {
            this.controllers.delete(factory);
            for (const te of atom.workspace.getTextEditors()) {
                const rec = map.get(te);
                if (rec)
                    rec.disposable.dispose();
            }
        });
    }
    setStatusBar(sb) {
        this.statusBarView = new status_bar_1.StatusBarView(this.outputPanel);
        this.statusBarTile = sb.addRightTile({
            item: this.statusBarView.element,
            priority: 100,
        });
    }
    removeStatusBar() {
        if (this.statusBarTile) {
            this.statusBarTile.destroy();
            this.statusBarTile = undefined;
        }
        if (this.statusBarView) {
            this.statusBarView.destroy();
            this.statusBarView = undefined;
        }
    }
    controllerOnGrammar(editor, grammar) {
        for (const [factory, map] of this.controllers.entries()) {
            const rec = map.get(editor);
            if (!rec && factory.supportsGrammar(grammar.scopeName)) {
                const controller = new factory(editor, this);
                const disposable = new atom_1.CompositeDisposable();
                disposable.add(new atom_1.Disposable(() => {
                    map.delete(editor);
                    controller.destroy();
                }), editor.onDidDestroy(() => disposable.dispose()));
                map.set(editor, { controller, disposable });
            }
            else if (rec && !factory.supportsGrammar(grammar.scopeName)) {
                rec.disposable.dispose();
            }
        }
    }
    subscribeEditorController() {
        this.disposables.add(atom.workspace.observeTextEditors((editor) => {
            const editorDisp = new atom_1.CompositeDisposable();
            editorDisp.add(editor.onDidChangeGrammar((grammar) => {
                this.controllerOnGrammar(editor, grammar);
            }), editor.onDidDestroy(() => {
                editorDisp.dispose();
                this.disposables.remove(editorDisp);
            }));
            this.disposables.add(editorDisp);
            this.controllerOnGrammar(editor, editor.getGrammar());
        }));
    }
}
exports.PluginManager = PluginManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLW1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcGx1Z2luLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFPYTtBQUNiLDZDQUF3QztBQUV4QyxtREFBMkU7QUFDM0UscURBQWdEO0FBQ2hELHFEQUFnRDtBQUNoRCx5REFBb0Q7QUFDcEQscUVBQStEO0FBQy9ELDZDQUE0QztBQUM1Qyx5Q0FBcUQ7QUFDckQsK0RBQXlEO0FBK0J6RCxNQUFhLGFBQWE7SUFxQnhCLFlBQVksS0FBYSxFQUFTLFdBQXdCO1FBQXhCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBZmxELGdCQUFXLEdBQUcsSUFBSSwwQkFBbUIsRUFBRSxDQUFBO1FBQ3ZDLFlBQU8sR0FPWCxJQUFJLGNBQU8sRUFBRSxDQUFBO1FBR1QsZ0JBQVcsR0FBRyxJQUFJLEdBQUcsRUFHMUIsQ0FBQTtRQTZDSSxxQkFBZ0IsR0FBRyxDQUFDLFFBQWlDLEVBQUUsRUFBRSxDQUM5RCxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxRQUFRLENBQUMsQ0FBQTtRQUV4QyxvQkFBZSxHQUFHLENBQUMsUUFBaUMsRUFBRSxFQUFFLENBQzdELElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBRXZDLHNCQUFpQixHQUFHLENBQUMsUUFBaUMsRUFBRSxFQUFFLENBQy9ELElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLG1CQUFtQixFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBbEQ5QyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFFbEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLHNCQUFTLEVBQUUsQ0FBQTtRQUNoQyxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFD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Q0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFO2dCQUN2QixVQUFVLENBQUMsT0FBTyxFQUFFLENBQUE7Z0JBQ3BCLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1lBQ3JDLENBQUMsQ0FBQyxDQUNILENBQUE7WUFDRCxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQTtZQUNoQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFBO1FBQ3ZELENBQUMsQ0FBQyxDQUNILENBQUE7SUFDSCxDQUFDO0NBQ0Y7QUFoTkQsc0NBZ05DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9zaXRlRGlzcG9zYWJsZSxcbiAgRW1pdHRlcixcbiAgVGV4dEVkaXRvcixcbiAgVGV4dEJ1ZmZlcixcbiAgR3JhbW1hcixcbiAgRGlzcG9zYWJsZSxcbn0gZnJvbSAnYXRvbSdcbmltcG9ydCB7IFJlc3VsdHNEQiB9IGZyb20gJy4vcmVzdWx0cy1kYidcbmltcG9ydCB7IE91dHB1dFBhbmVsLCBJU3RhdGUgYXMgSU91dHB1dFZpZXdTdGF0ZSB9IGZyb20gJy4vb3V0cHV0LXBhbmVsJ1xuaW1wb3J0IHsgQ29uZmlnUGFyYW1NYW5hZ2VyLCBJU3RhdGUgYXMgSVBhcmFtU3RhdGUgfSBmcm9tICcuL2NvbmZpZy1wYXJhbXMnXG5pbXBvcnQgeyBFZGl0b3JDb250cm9sIH0gZnJvbSAnLi9lZGl0b3ItY29udHJvbCdcbmltcG9ydCB7IExpbnRlclN1cHBvcnQgfSBmcm9tICcuL2xpbnRlci1zdXBwb3J0J1xuaW1wb3J0IHsgVG9vbHRpcFJlZ2lzdHJ5IH0gZnJvbSAnLi90b29sdGlwLXJlZ2lzdHJ5J1xuaW1wb3J0IHsgQ2hlY2tSZXN1bHRzUHJvdmlkZXIgfSBmcm9tICcuL2NoZWNrLXJlc3VsdHMtcHJvdmlkZXInXG5pbXBvcnQgeyBTdGF0dXNCYXJWaWV3IH0gZnJvbSAnLi9zdGF0dXMtYmFyJ1xuaW1wb3J0IHsgUHJldHRpZnlFZGl0b3JDb250cm9sbGVyIH0gZnJvbSAnLi9wcmV0dGlmeSdcbmltcG9ydCB7IEVkaXRvck1hcmtDb250cm9sIH0gZnJvbSAnLi9lZGl0b3ItbWFyay1jb250cm9sJ1xuaW1wb3J0ICogYXMgVVBJIGZyb20gJ2F0b20taGFza2VsbC11cGknXG5pbXBvcnQgKiBhcyBMaW50ZXIgZnJvbSAnYXRvbS9saW50ZXInXG5pbXBvcnQgKiBhcyBTdGF0dXNCYXIgZnJvbSAnYXRvbS9zdGF0dXMtYmFyJ1xuXG5leHBvcnQgeyBJUGFyYW1TdGF0ZSwgSU91dHB1dFZpZXdTdGF0ZSB9XG5cbmV4cG9ydCB0eXBlIFRFdmVudFR5cGUgPSAna2V5Ym9hcmQnIHwgJ2NvbnRleHQnIHwgJ21vdXNlJyB8ICdzZWxlY3Rpb24nXG5cbmV4cG9ydCBpbnRlcmZhY2UgSVN0YXRlIHtcbiAgY29uZmlnUGFyYW1zOiBJUGFyYW1TdGF0ZVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElFZGl0b3JDb250cm9sbGVyIHtcbiAgZGVzdHJveSgpOiB2b2lkXG59XG5cbmV4cG9ydCB0eXBlIElFZGl0b3JDb250cm9sbGVyRmFjdG9yeSA9IElFZGl0b3JDb250cm9sbGVyRmFjdG9yeVQ8XG4gIElFZGl0b3JDb250cm9sbGVyXG4+XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUVkaXRvckNvbnRyb2xsZXJGYWN0b3J5VDxUPiB7XG4gIG5ldyAoZWRpdG9yOiBUZXh0RWRpdG9yLCBtYW5hZ2VyOiBQbHVnaW5NYW5hZ2VyKTogVFxuICBzdXBwb3J0c0dyYW1tYXIoZ3JhbW1hcjogc3RyaW5nKTogYm9vbGVhblxufVxuXG5leHBvcnQgdHlwZSBFQ01hcDxUIGV4dGVuZHMgSUVkaXRvckNvbnRyb2xsZXI+ID0gV2Vha01hcDxcbiAgVGV4dEVkaXRvcixcbiAgeyBjb250cm9sbGVyOiBUOyBkaXNwb3NhYmxlOiBEaXNwb3NhYmxlIH1cbj5cblxuZXhwb3J0IGNsYXNzIFBsdWdpbk1hbmFnZXIge1xuICBwdWJsaWMgcmVzdWx0c0RCOiBSZXN1bHRzREJcbiAgcHVibGljIGNvbmZpZ1BhcmFtTWFuYWdlcjogQ29uZmlnUGFyYW1NYW5hZ2VyXG4gIHB1YmxpYyB0b29sdGlwUmVnaXN0cnk6IFRvb2x0aXBSZWdpc3RyeVxuICBwcml2YXRlIGNoZWNrUmVzdWx0c1Byb3ZpZGVyPzogQ2hlY2tSZXN1bHRzUHJvdmlkZXJcbiAgcHJpdmF0ZSBsaW50ZXJTdXBwb3J0PzogTGludGVyU3VwcG9ydFxuICBwcml2YXRlIGRpc3Bvc2FibGVzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICBwcml2YXRlIGVtaXR0ZXI6IEVtaXR0ZXI8XG4gICAge30sXG4gICAge1xuICAgICAgJ3dpbGwtc2F2ZS1idWZmZXInOiBUZXh0QnVmZmVyXG4gICAgICAnZGlkLXNhdmUtYnVmZmVyJzogVGV4dEJ1ZmZlclxuICAgICAgJ2RpZC1zdG9wLWNoYW5naW5nJzogVGV4dEJ1ZmZlclxuICAgIH1cbiAgPiA9IG5ldyBFbWl0dGVyKClcbiAgcHJpdmF0ZSBzdGF0dXNCYXJUaWxlPzogU3RhdHVzQmFyLlRpbGVcbiAgcHJpdmF0ZSBzdGF0dXNCYXJWaWV3PzogU3RhdHVzQmFyVmlld1xuICBwcml2YXRlIGNvbnRyb2xsZXJzID0gbmV3IE1hcDxcbiAgICBJRWRpdG9yQ29udHJvbGxlckZhY3RvcnksXG4gICAgRUNNYXA8SUVkaXRvckNvbnRyb2xsZXI+XG4gID4oKVxuICBjb25zdHJ1Y3RvcihzdGF0ZTogSVN0YXRlLCBwdWJsaWMgb3V0cHV0UGFuZWw6IE91dHB1dFBhbmVsKSB7XG4gICAgdGhpcy5kaXNwb3NhYmxlcy5hZGQodGhpcy5lbWl0dGVyKVxuXG4gICAgdGhpcy5yZXN1bHRzREIgPSBuZXcgUmVzdWx0c0RCKClcbiAgICB0aGlzLm91dHB1dFBhbmVsLmNvbm5lY3RSZXN1bHRzKHRoaXMucmVzdWx0c0RCKVxuICAgIHRoaXMudG9vbHRpcFJlZ2lzdHJ5ID0gbmV3IFRvb2x0aXBSZWdpc3RyeSh0aGlzKVxuICAgIHRoaXMuY29uZmlnUGFyYW1NYW5hZ2VyID0gbmV3IENvbmZpZ1BhcmFtTWFuYWdlcihcbiAgICAgIHRoaXMub3V0cHV0UGFuZWwsXG4gICAgICBzdGF0ZS5jb25maWdQYXJhbXMsXG4gICAgKVxuXG4gICAgdGhpcy5kaXNwb3NhYmxlcy5hZGQoXG4gICAgICB0aGlzLmFkZEVkaXRvckNvbnRyb2xsZXIoRWRpdG9yQ29udHJvbCksXG4gICAgICB0aGlzLmFkZEVkaXRvckNvbnRyb2xsZXIoUHJldHRpZnlFZGl0b3JDb250cm9sbGVyKSxcbiAgICAgIHRoaXMuYWRkRWRpdG9yQ29udHJvbGxlcihFZGl0b3JNYXJrQ29udHJvbCksXG4gICAgKVxuICAgIGlmIChhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLm1lc3NhZ2VEaXNwbGF5RnJvbnRlbmQnKSA9PT0gJ2J1aWx0aW4nKSB7XG4gICAgICB0aGlzLmNoZWNrUmVzdWx0c1Byb3ZpZGVyID0gbmV3IENoZWNrUmVzdWx0c1Byb3ZpZGVyKHRoaXMpXG4gICAgfVxuXG4gICAgdGhpcy5zdWJzY3JpYmVFZGl0b3JDb250cm9sbGVyKClcbiAgfVxuXG4gIHB1YmxpYyBkZWFjdGl2YXRlKCkge1xuICAgIHRoaXMucmVzdWx0c0RCLmRlc3Ryb3koKVxuICAgIHRoaXMuZGlzcG9zYWJsZXMuZGlzcG9zZSgpXG4gICAgaWYgKHRoaXMuY2hlY2tSZXN1bHRzUHJvdmlkZXIpIHRoaXMuY2hlY2tSZXN1bHRzUHJvdmlkZXIuZGVzdHJveSgpXG5cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICB0aGlzLm91dHB1dFBhbmVsLnJlYWxseURlc3Ryb3koKVxuICAgIHRoaXMuY29uZmlnUGFyYW1NYW5hZ2VyLmRlc3Ryb3koKVxuICAgIHRoaXMucmVtb3ZlU3RhdHVzQmFyKClcbiAgICBpZiAodGhpcy5saW50ZXJTdXBwb3J0KSB7XG4gICAgICB0aGlzLmxpbnRlclN1cHBvcnQuZGVzdHJveSgpXG4gICAgICB0aGlzLmxpbnRlclN1cHBvcnQgPSB1bmRlZmluZWRcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc2VyaWFsaXplKCk6IElTdGF0ZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbmZpZ1BhcmFtczogdGhpcy5jb25maWdQYXJhbU1hbmFnZXIuc2VyaWFsaXplKCksXG4gICAgfVxuICB9XG5cbiAgcHVibGljIG9uV2lsbFNhdmVCdWZmZXIgPSAoY2FsbGJhY2s6IFVQSS5UVGV4dEJ1ZmZlckNhbGxiYWNrKSA9PlxuICAgIHRoaXMuZW1pdHRlci5vbignd2lsbC1zYXZlLWJ1ZmZlcicsIGNhbGxiYWNrKVxuXG4gIHB1YmxpYyBvbkRpZFNhdmVCdWZmZXIgPSAoY2FsbGJhY2s6IFVQSS5UVGV4dEJ1ZmZlckNhbGxiYWNrKSA9PlxuICAgIHRoaXMuZW1pdHRlci5vbignZGlkLXNhdmUtYnVmZmVyJywgY2FsbGJhY2spXG5cbiAgcHVibGljIG9uRGlkU3RvcENoYW5naW5nID0gKGNhbGxiYWNrOiBVUEkuVFRleHRCdWZmZXJDYWxsYmFjaykgPT5cbiAgICB0aGlzLmVtaXR0ZXIub24oJ2RpZC1zdG9wLWNoYW5naW5nJywgY2FsbGJhY2spXG5cbiAgcHVibGljIHdpbGxTYXZlQnVmZmVyKGJ1ZmZlcjogVGV4dEJ1ZmZlcikge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIuZW1pdCgnd2lsbC1zYXZlLWJ1ZmZlcicsIGJ1ZmZlcilcbiAgfVxuXG4gIHB1YmxpYyBkaWRTYXZlQnVmZmVyKGJ1ZmZlcjogVGV4dEJ1ZmZlcikge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIuZW1pdCgnZGlkLXNhdmUtYnVmZmVyJywgYnVmZmVyKVxuICB9XG5cbiAgcHVibGljIGRpZFN0b3BDaGFuZ2luZyhidWZmZXI6IFRleHRCdWZmZXIpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLmVtaXQoJ2RpZC1zdG9wLWNoYW5naW5nJywgYnVmZmVyKVxuICB9XG5cbiAgcHVibGljIHRvZ2dsZVBhbmVsKCkge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1mbG9hdGluZy1wcm9taXNlc1xuICAgIGF0b20ud29ya3NwYWNlLnRvZ2dsZSh0aGlzLm91dHB1dFBhbmVsKVxuICB9XG5cbiAgcHVibGljIGNvbnRyb2xsZXIoZWRpdG9yOiBUZXh0RWRpdG9yKTogRWRpdG9yQ29udHJvbCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuY29udHJvbGxlclR5cGUoRWRpdG9yQ29udHJvbCwgZWRpdG9yKVxuICB9XG5cbiAgcHVibGljIGNvbnRyb2xsZXJUeXBlPFxuICAgIFUgZXh0ZW5kcyBJRWRpdG9yQ29udHJvbGxlcixcbiAgICBUIGV4dGVuZHMgSUVkaXRvckNvbnRyb2xsZXJGYWN0b3J5VDxVPlxuICA+KGZhY3Rvcnk6IFQsIGVkaXRvcjogVGV4dEVkaXRvcik6IFUgfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IGVjbWFwID0gdGhpcy5jb250cm9sbGVycy5nZXQoZmFjdG9yeSlcbiAgICBjb25zdCByZWMgPSBlY21hcCA/IGVjbWFwLmdldChlZGl0b3IpIDogdW5kZWZpbmVkXG4gICAgcmV0dXJuIHJlYyA/IChyZWMuY29udHJvbGxlciBhcyBVKSA6IHVuZGVmaW5lZFxuICB9XG5cbiAgcHVibGljIHNldExpbnRlcihsaW50ZXI6IExpbnRlci5JbmRpZURlbGVnYXRlKSB7XG4gICAgaWYgKGF0b20uY29uZmlnLmdldCgnaWRlLWhhc2tlbGwubWVzc2FnZURpc3BsYXlGcm9udGVuZCcpICE9PSAnbGludGVyJykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHRoaXMubGludGVyU3VwcG9ydCA9IG5ldyBMaW50ZXJTdXBwb3J0KGxpbnRlciwgdGhpcy5yZXN1bHRzREIpXG4gIH1cblxuICBwdWJsaWMgbmV4dEVycm9yKCkge1xuICAgIGlmIChhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLm1lc3NhZ2VEaXNwbGF5RnJvbnRlbmQnKSAhPT0gJ2J1aWx0aW4nKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdGhpcy5vdXRwdXRQYW5lbC5zaG93TmV4dEVycm9yKClcbiAgfVxuXG4gIHB1YmxpYyBwcmV2RXJyb3IoKSB7XG4gICAgaWYgKGF0b20uY29uZmlnLmdldCgnaWRlLWhhc2tlbGwubWVzc2FnZURpc3BsYXlGcm9udGVuZCcpICE9PSAnYnVpbHRpbicpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB0aGlzLm91dHB1dFBhbmVsLnNob3dQcmV2RXJyb3IoKVxuICB9XG5cbiAgcHVibGljIGJhY2tlbmRTdGF0dXMocGx1Z2luTmFtZTogc3RyaW5nLCBzdDogVVBJLklTdGF0dXMpIHtcbiAgICB0aGlzLm91dHB1dFBhbmVsLmJhY2tlbmRTdGF0dXMocGx1Z2luTmFtZSwgc3QpXG4gICAgaWYgKHRoaXMuc3RhdHVzQmFyVmlldykge1xuICAgICAgdGhpcy5zdGF0dXNCYXJWaWV3LmJhY2tlbmRTdGF0dXMocGx1Z2luTmFtZSwgc3QpXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFkZEVkaXRvckNvbnRyb2xsZXI8XG4gICAgVSBleHRlbmRzIElFZGl0b3JDb250cm9sbGVyLFxuICAgIFQgZXh0ZW5kcyBJRWRpdG9yQ29udHJvbGxlckZhY3RvcnlUPFU+XG4gID4oZmFjdG9yeTogVCk6IERpc3Bvc2FibGUge1xuICAgIGlmICh0aGlzLmNvbnRyb2xsZXJzLmhhcyhmYWN0b3J5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBEdXBsaWNhdGUgY29udHJvbGxlciBmYWN0b3J5ICR7ZmFjdG9yeS50b1N0cmluZygpfWApXG4gICAgfVxuICAgIGNvbnN0IG1hcDogRUNNYXA8VT4gPSBuZXcgV2Vha01hcCgpXG4gICAgdGhpcy5jb250cm9sbGVycy5zZXQoZmFjdG9yeSwgbWFwKVxuICAgIHJldHVybiBuZXcgRGlzcG9zYWJsZSgoKSA9PiB7XG4gICAgICB0aGlzLmNvbnRyb2xsZXJzLmRlbGV0ZShmYWN0b3J5KVxuICAgICAgZm9yIChjb25zdCB0ZSBvZiBhdG9tLndvcmtzcGFjZS5nZXRUZXh0RWRpdG9ycygpKSB7XG4gICAgICAgIGNvbnN0IHJlYyA9IG1hcC5nZXQodGUpXG4gICAgICAgIGlmIChyZWMpIHJlYy5kaXNwb3NhYmxlLmRpc3Bvc2UoKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBwdWJsaWMgc2V0U3RhdHVzQmFyKHNiOiBTdGF0dXNCYXIuU3RhdHVzQmFyKSB7XG4gICAgdGhpcy5zdGF0dXNCYXJWaWV3ID0gbmV3IFN0YXR1c0JhclZpZXcodGhpcy5vdXRwdXRQYW5lbClcbiAgICB0aGlzLnN0YXR1c0JhclRpbGUgPSBzYi5hZGRSaWdodFRpbGUoe1xuICAgICAgaXRlbTogdGhpcy5zdGF0dXNCYXJWaWV3LmVsZW1lbnQsXG4gICAgICBwcmlvcml0eTogMTAwLFxuICAgIH0pXG4gIH1cblxuICBwdWJsaWMgcmVtb3ZlU3RhdHVzQmFyKCkge1xuICAgIGlmICh0aGlzLnN0YXR1c0JhclRpbGUpIHtcbiAgICAgIHRoaXMuc3RhdHVzQmFyVGlsZS5kZXN0cm95KClcbiAgICAgIHRoaXMuc3RhdHVzQmFyVGlsZSA9IHVuZGVmaW5lZFxuICAgIH1cbiAgICBpZiAodGhpcy5zdGF0dXNCYXJWaWV3KSB7XG4gICAgICB0aGlzLnN0YXR1c0JhclZpZXcuZGVzdHJveSgpXG4gICAgICB0aGlzLnN0YXR1c0JhclZpZXcgPSB1bmRlZmluZWRcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNvbnRyb2xsZXJPbkdyYW1tYXIoZWRpdG9yOiBUZXh0RWRpdG9yLCBncmFtbWFyOiBHcmFtbWFyKSB7XG4gICAgZm9yIChjb25zdCBbZmFjdG9yeSwgbWFwXSBvZiB0aGlzLmNvbnRyb2xsZXJzLmVudHJpZXMoKSkge1xuICAgICAgY29uc3QgcmVjID0gbWFwLmdldChlZGl0b3IpXG4gICAgICBpZiAoIXJlYyAmJiBmYWN0b3J5LnN1cHBvcnRzR3JhbW1hcihncmFtbWFyLnNjb3BlTmFtZSkpIHtcbiAgICAgICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBmYWN0b3J5KGVkaXRvciwgdGhpcylcbiAgICAgICAgY29uc3QgZGlzcG9zYWJsZSA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgICAgICAgZGlzcG9zYWJsZS5hZGQoXG4gICAgICAgICAgbmV3IERpc3Bvc2FibGUoKCkgPT4ge1xuICAgICAgICAgICAgbWFwLmRlbGV0ZShlZGl0b3IpXG4gICAgICAgICAgICBjb250cm9sbGVyLmRlc3Ryb3koKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIGVkaXRvci5vbkRpZERlc3Ryb3koKCkgPT4gZGlzcG9zYWJsZS5kaXNwb3NlKCkpLFxuICAgICAgICApXG4gICAgICAgIG1hcC5zZXQoZWRpdG9yLCB7IGNvbnRyb2xsZXIsIGRpc3Bvc2FibGUgfSlcbiAgICAgIH0gZWxzZSBpZiAocmVjICYmICFmYWN0b3J5LnN1cHBvcnRzR3JhbW1hcihncmFtbWFyLnNjb3BlTmFtZSkpIHtcbiAgICAgICAgcmVjLmRpc3Bvc2FibGUuZGlzcG9zZSgpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gT2JzZXJ2ZSB0ZXh0IGVkaXRvcnMgdG8gYXR0YWNoIGNvbnRyb2xsZXJcbiAgcHJpdmF0ZSBzdWJzY3JpYmVFZGl0b3JDb250cm9sbGVyKCkge1xuICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKFxuICAgICAgYXRvbS53b3Jrc3BhY2Uub2JzZXJ2ZVRleHRFZGl0b3JzKChlZGl0b3IpID0+IHtcbiAgICAgICAgY29uc3QgZWRpdG9yRGlzcCA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgICAgICAgZWRpdG9yRGlzcC5hZGQoXG4gICAgICAgICAgZWRpdG9yLm9uRGlkQ2hhbmdlR3JhbW1hcigoZ3JhbW1hcikgPT4ge1xuICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyT25HcmFtbWFyKGVkaXRvciwgZ3JhbW1hcilcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBlZGl0b3Iub25EaWREZXN0cm95KCgpID0+IHtcbiAgICAgICAgICAgIGVkaXRvckRpc3AuZGlzcG9zZSgpXG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2FibGVzLnJlbW92ZShlZGl0b3JEaXNwKVxuICAgICAgICAgIH0pLFxuICAgICAgICApXG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKGVkaXRvckRpc3ApXG4gICAgICAgIHRoaXMuY29udHJvbGxlck9uR3JhbW1hcihlZGl0b3IsIGVkaXRvci5nZXRHcmFtbWFyKCkpXG4gICAgICB9KSxcbiAgICApXG4gIH1cbn1cbiJdfQ==