"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const etch = require("etch");
const atom_1 = require("atom");
const output_panel_buttons_1 = require("./views/output-panel-buttons");
const output_panel_checkbox_1 = require("./views/output-panel-checkbox");
const progress_bar_1 = require("./views/progress-bar");
const output_panel_items_1 = require("./views/output-panel-items");
const status_icon_1 = require("./views/status-icon");
const utils_1 = require("../utils");
const $ = etch.dom;
class OutputPanel {
    constructor(state = { fileFilter: false, activeTab: 'error' }) {
        this.state = state;
        this.elements = new Set();
        this.disposables = new atom_1.CompositeDisposable();
        this.currentResult = 0;
        this.statusMap = new Map();
        this.progress = [];
        this.tabs = new Map();
        this.tabUsers = new Map();
        this.switchFileFilter = () => {
            this.state.fileFilter = !this.state.fileFilter;
            utils_1.handlePromise(this.updateItems());
        };
        this.setButtonsClass(atom.config.get('ide-haskell.buttonsPosition'));
        etch.initialize(this);
        atom.config.onDidChange('ide-haskell.buttonsPosition', ({ newValue }) => {
            this.setButtonsClass(newValue);
            utils_1.handlePromise(this.update());
        });
        for (const tab of OutputPanel.defaultTabs) {
            utils_1.handlePromise(this.createTab(tab, {}));
        }
        this.disposables.add(atom.workspace.onDidChangeActivePaneItem(() => {
            if (this.state.fileFilter)
                utils_1.handlePromise(this.updateItems());
        }));
        setImmediate(async () => {
            await this.show();
            if (atom.config.get('ide-haskell.autoHideOutput')) {
                this.hide();
            }
        });
    }
    connectResults(results) {
        if (this.results)
            throw new Error('Results already connected!');
        this.results = results;
        let lastUpdateTime = Date.now();
        let collectedSeverities = new Set();
        const didUpdate = (severities) => {
            this.currentResult = 0;
            utils_1.handlePromise(this.updateItems());
            const newUpdateTime = Date.now();
            if (newUpdateTime - lastUpdateTime <
                atom.config.get('ide-haskell.switchTabOnCheckInterval')) {
                for (const s of severities) {
                    collectedSeverities.add(s);
                }
            }
            else {
                collectedSeverities = new Set(severities);
            }
            if (atom.config.get('ide-haskell.autoHideOutput') &&
                (!this.results || this.results.isEmpty(severities))) {
                this.hide();
            }
            else if (atom.config.get('ide-haskell.switchTabOnCheck')) {
                this.activateFirstNonEmptyTab(collectedSeverities);
            }
            lastUpdateTime = newUpdateTime;
        };
        this.disposables.add(this.results.onDidUpdate(didUpdate));
        utils_1.handlePromise(this.update());
    }
    render() {
        if (!this.results) {
            return etch.dom("ide-haskell-panel", null);
        }
        return (etch.dom("ide-haskell-panel", { class: this.buttonsClass },
            etch.dom("ide-haskell-panel-heading", null,
                etch.dom(status_icon_1.StatusIcon, { statusMap: this.statusMap }),
                etch.dom(output_panel_buttons_1.OutputPanelButtons, { buttons: Array.from(this.tabs.values()), activeBtn: this.state.activeTab }),
                etch.dom(output_panel_checkbox_1.OutputPanelCheckbox, { class: "ide-haskell-checkbox--uri-filter", state: this.state.fileFilter || false, onSwitched: this.switchFileFilter, enabledHint: "Show current file messages", disabledHint: "Show all project messages" }),
                Array.from(this.elements.values()),
                etch.dom(progress_bar_1.ProgressBar, { progress: this.progress })),
            etch.dom(output_panel_items_1.OutputPanelItems, { model: this.results, filter: this.itemFilter, ref: "items" })));
    }
    async update() {
        return etch.update(this);
    }
    destroy() {
        this.hide();
    }
    async reallyDestroy() {
        await etch.destroy(this);
        this.disposables.dispose();
    }
    async toggle() {
        const pane = atom.workspace.paneContainerForItem(this);
        if (!pane || (utils_1.isDock(pane) && !pane.isVisible())) {
            return this.show();
        }
        else {
            return this.hide();
        }
    }
    async show() {
        await atom.workspace.open(this, {
            searchAllPanes: true,
            activatePane: false,
        });
        const pane = atom.workspace.paneContainerForItem(this);
        if (pane && utils_1.isDock(pane)) {
            pane.show();
        }
    }
    hide() {
        const pane = atom.workspace.paneContainerForItem(this);
        if (pane && utils_1.isDock(pane)) {
            atom.workspace.hide(this);
        }
    }
    getTitle() {
        return 'IDE-Haskell';
    }
    getURI() {
        return `ide-haskell://output-panel/`;
    }
    getDefaultLocation() {
        return atom.config.get('ide-haskell.panelPosition');
    }
    addPanelControl(def) {
        let newElement;
        if (utils_1.isSimpleControlDef(def)) {
            const { events, classes, style, attrs } = def.opts;
            const props = {};
            if (classes) {
                props.class = classes.join(' ');
            }
            if (style) {
                props.style = style;
            }
            if (attrs) {
                props.attributes = attrs;
            }
            if (events) {
                props.on = events;
            }
            newElement = $(def.element, props);
        }
        else {
            newElement = $(def.element, def.opts);
        }
        this.elements.add(newElement);
        utils_1.handlePromise(this.update());
        return new atom_1.Disposable(() => {
            this.elements.delete(newElement);
            utils_1.handlePromise(this.update());
        });
    }
    async updateItems() {
        const activeTab = this.getActiveTab();
        let currentUri;
        if (this.state.fileFilter) {
            const ed = atom.workspace.getActiveTextEditor();
            currentUri = ed ? ed.getPath() : undefined;
        }
        let scroll = false;
        if (activeTab) {
            const ato = this.tabs.get(activeTab);
            if (currentUri !== undefined && ato && ato.uriFilter) {
                this.itemFilter = ({ uri, severity }) => severity === activeTab && uri === currentUri;
            }
            else {
                this.itemFilter = ({ severity }) => severity === activeTab;
            }
            scroll =
                (ato && ato.autoScroll && this.refs.items && this.refs.items.atEnd()) ||
                    false;
        }
        if (this.results) {
            for (const [btn, ato] of this.tabs.entries()) {
                ato.count = Array.from(this.results.filter(({ severity }) => severity === btn)).length;
            }
        }
        await this.update();
        if (scroll && this.refs.items)
            await this.refs.items.scrollToEnd();
    }
    activateTab(tab) {
        this.state.activeTab = tab;
        utils_1.handlePromise(this.updateItems());
    }
    activateFirstNonEmptyTab(severities) {
        for (const tab of this.tabs.values()) {
            if (!severities.has(tab.name))
                continue;
            const count = tab.count;
            if (count && count > 0) {
                utils_1.handlePromise(this.show());
                this.activateTab(tab.name);
                break;
            }
        }
    }
    showItem(item) {
        this.activateTab(item.severity);
        if (this.refs.items)
            utils_1.handlePromise(this.refs.items.showItem(item));
    }
    getActiveTab() {
        return this.state.activeTab;
    }
    async createTab(name, { uriFilter = true, autoScroll = false }) {
        if (OutputPanel.defaultTabs.includes(name) &&
            atom.config.get('ide-haskell.messageDisplayFrontend') !== 'builtin') {
            return;
        }
        if (this.tabs.has(name)) {
            this.tabUsers.set(name, this.tabUsers.get(name) + 1);
        }
        else {
            this.tabUsers.set(name, 1);
            this.tabs.set(name, {
                name,
                count: 0,
                onClick: () => this.activateTab(name),
                uriFilter,
                autoScroll,
            });
            if (this.state.activeTab)
                this.activateTab(this.state.activeTab);
        }
        return this.update();
    }
    async removeTab(name) {
        if (OutputPanel.defaultTabs.includes(name))
            return;
        if (this.tabUsers.has(name)) {
            let n = this.tabUsers.get(name);
            n -= 1;
            if (n === 0) {
                this.tabUsers.delete(name);
                this.tabs.delete(name);
                if (this.state.activeTab === name) {
                    this.state.activeTab = OutputPanel.defaultTabs[0];
                }
                return this.update();
            }
            else {
                this.tabUsers.set(name, n);
            }
        }
        else {
            throw new Error(`Ide-Haskell: Removing nonexistent output panel tab ${name}`);
        }
    }
    serialize() {
        return Object.assign(Object.assign({}, this.state), { deserializer: 'ide-haskell/OutputPanel' });
    }
    backendStatus(pluginName, st) {
        this.statusMap.set(pluginName, st);
        this.progress = Array.from(this.statusMap.values()).reduce((cv, i) => {
            if (i.status === 'progress' && i.progress !== undefined) {
                cv.push(i.progress);
            }
            return cv;
        }, []);
        utils_1.handlePromise(this.update());
    }
    showNextError() {
        if (!this.results)
            return;
        const rs = Array.from(this.results.filter(({ uri }) => uri !== undefined));
        if (rs.length === 0) {
            return;
        }
        this.currentResult++;
        if (this.currentResult >= rs.length) {
            this.currentResult = 0;
        }
        this.showItem(rs[this.currentResult]);
    }
    showPrevError() {
        if (!this.results)
            return;
        const rs = Array.from(this.results.filter(({ uri }) => uri !== undefined));
        if (rs.length === 0) {
            return;
        }
        this.currentResult--;
        if (this.currentResult < 0) {
            this.currentResult = rs.length - 1;
        }
        this.showItem(rs[this.currentResult]);
    }
    setButtonsClass(buttonsPos) {
        switch (buttonsPos) {
            case 'top':
                this.buttonsClass = 'buttons-top';
                break;
            case 'left':
                this.buttonsClass = 'buttons-left';
                break;
        }
    }
}
exports.OutputPanel = OutputPanel;
OutputPanel.defaultTabs = [
    'error',
    'warning',
    'lint',
];
//# sourceMappingURL=data:application/json;base64,