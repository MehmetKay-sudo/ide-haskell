"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const etch = require("etch");
const output_panel_item_1 = require("./output-panel-item");
class OutputPanelItems {
    constructor(props) {
        this.props = props;
        this.itemMap = new WeakMap();
        etch.initialize(this);
    }
    render() {
        return (etch.dom("ide-haskell-panel-items", { class: "native-key-bindings", tabIndex: "-1" }, this.renderItems()));
    }
    async update(props) {
        this.props = props;
        return etch.update(this);
    }
    async destroy() {
        await etch.destroy(this);
    }
    async showItem(item) {
        await etch.update(this);
        const view = this.itemMap.get(item);
        if (view) {
            view.component.clickPosition();
            view.domNode.scrollIntoView({
                block: 'start',
                behavior: 'smooth',
            });
        }
    }
    async scrollToEnd() {
        await etch.update(this);
        this.element.scrollTop = this.element.scrollHeight;
    }
    atEnd() {
        return (this.element.scrollTop >=
            this.element.scrollHeight - this.element.clientHeight);
    }
    renderItems() {
        const items = this.props.filter
            ? this.props.model.filter(this.props.filter)
            : this.props.model.results();
        return Array.from(items).map((item) => {
            const view = etch.dom(output_panel_item_1.OutputPanelItem, { model: item });
            this.itemMap.set(item, view);
            return view;
        });
    }
}
exports.OutputPanelItems = OutputPanelItems;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0cHV0LXBhbmVsLWl0ZW1zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL291dHB1dC1wYW5lbC92aWV3cy9vdXRwdXQtcGFuZWwtaXRlbXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkJBQTRCO0FBQzVCLDJEQUFxRDtBQVFyRCxNQUFhLGdCQUFnQjtJQU0zQixZQUFtQixLQUFhO1FBQWIsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUM5QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUE7UUFDNUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUN2QixDQUFDO0lBRU0sTUFBTTtRQUNYLE9BQU8sQ0FDTCxzQ0FBeUIsS0FBSyxFQUFDLHFCQUFxQixFQUFDLFFBQVEsRUFBQyxJQUFJLElBQy9ELElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FDSyxDQUMzQixDQUFBO0lBQ0gsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBYTtRQUMvQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtRQUNsQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDMUIsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFPO1FBQ2xCLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUMxQixDQUFDO0lBRU0sS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFnQjtRQUNwQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDdkIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDbkMsSUFBSSxJQUFJLEVBQUU7WUFDUixJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxDQUFBO1lBQzlCLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDO2dCQUMxQixLQUFLLEVBQUUsT0FBTztnQkFDZCxRQUFRLEVBQUUsUUFBUTthQUNuQixDQUFDLENBQUE7U0FDSDtJQUNILENBQUM7SUFFTSxLQUFLLENBQUMsV0FBVztRQUN0QixNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUE7SUFDcEQsQ0FBQztJQUVNLEtBQUs7UUFDVixPQUFPLENBQ0wsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTO1lBQ3RCLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUN0RCxDQUFBO0lBQ0gsQ0FBQztJQUVPLFdBQVc7UUFDakIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNO1lBQzdCLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7WUFDNUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQzlCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNwQyxNQUFNLElBQUksR0FBRyxTQUFDLG1DQUFlLElBQUMsS0FBSyxFQUFFLElBQUksR0FBSSxDQUFBO1lBQzdDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFXLENBQUMsQ0FBQTtZQUNuQyxPQUFPLElBQUksQ0FBQTtRQUNiLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGO0FBOURELDRDQThEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGV0Y2ggZnJvbSAnZXRjaCdcbmltcG9ydCB7IE91dHB1dFBhbmVsSXRlbSB9IGZyb20gJy4vb3V0cHV0LXBhbmVsLWl0ZW0nXG5pbXBvcnQgeyBSZXN1bHRzREIsIFJlc3VsdEl0ZW0gfSBmcm9tICcuLi8uLi9yZXN1bHRzLWRiJ1xuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9wcyBleHRlbmRzIEpTWC5Qcm9wcyB7XG4gIG1vZGVsOiBSZXN1bHRzREJcbiAgZmlsdGVyPzogKGl0ZW06IFJlc3VsdEl0ZW0pID0+IGJvb2xlYW5cbn1cblxuZXhwb3J0IGNsYXNzIE91dHB1dFBhbmVsSXRlbXMgaW1wbGVtZW50cyBKU1guRWxlbWVudENsYXNzIHtcbiAgcHJpdmF0ZSBlbGVtZW50ITogSFRNTEVsZW1lbnRcbiAgcHJpdmF0ZSBpdGVtTWFwOiBXZWFrTWFwPFxuICAgIFJlc3VsdEl0ZW0sXG4gICAgeyBjb21wb25lbnQ6IE91dHB1dFBhbmVsSXRlbTsgZG9tTm9kZTogSFRNTEVsZW1lbnQgfVxuICA+XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwcm9wczogSVByb3BzKSB7XG4gICAgdGhpcy5pdGVtTWFwID0gbmV3IFdlYWtNYXAoKVxuICAgIGV0Y2guaW5pdGlhbGl6ZSh0aGlzKVxuICB9XG5cbiAgcHVibGljIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGlkZS1oYXNrZWxsLXBhbmVsLWl0ZW1zIGNsYXNzPVwibmF0aXZlLWtleS1iaW5kaW5nc1wiIHRhYkluZGV4PVwiLTFcIj5cbiAgICAgICAge3RoaXMucmVuZGVySXRlbXMoKX1cbiAgICAgIDwvaWRlLWhhc2tlbGwtcGFuZWwtaXRlbXM+XG4gICAgKVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHVwZGF0ZShwcm9wczogSVByb3BzKSB7XG4gICAgdGhpcy5wcm9wcyA9IHByb3BzXG4gICAgcmV0dXJuIGV0Y2gudXBkYXRlKHRoaXMpXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGVzdHJveSgpIHtcbiAgICBhd2FpdCBldGNoLmRlc3Ryb3kodGhpcylcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzaG93SXRlbShpdGVtOiBSZXN1bHRJdGVtKSB7XG4gICAgYXdhaXQgZXRjaC51cGRhdGUodGhpcylcbiAgICBjb25zdCB2aWV3ID0gdGhpcy5pdGVtTWFwLmdldChpdGVtKVxuICAgIGlmICh2aWV3KSB7XG4gICAgICB2aWV3LmNvbXBvbmVudC5jbGlja1Bvc2l0aW9uKClcbiAgICAgIHZpZXcuZG9tTm9kZS5zY3JvbGxJbnRvVmlldyh7XG4gICAgICAgIGJsb2NrOiAnc3RhcnQnLFxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCcsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzY3JvbGxUb0VuZCgpIHtcbiAgICBhd2FpdCBldGNoLnVwZGF0ZSh0aGlzKVxuICAgIHRoaXMuZWxlbWVudC5zY3JvbGxUb3AgPSB0aGlzLmVsZW1lbnQuc2Nyb2xsSGVpZ2h0XG4gIH1cblxuICBwdWJsaWMgYXRFbmQoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuZWxlbWVudC5zY3JvbGxUb3AgPj1cbiAgICAgIHRoaXMuZWxlbWVudC5zY3JvbGxIZWlnaHQgLSB0aGlzLmVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gICAgKVxuICB9XG5cbiAgcHJpdmF0ZSByZW5kZXJJdGVtcygpIHtcbiAgICBjb25zdCBpdGVtcyA9IHRoaXMucHJvcHMuZmlsdGVyXG4gICAgICA/IHRoaXMucHJvcHMubW9kZWwuZmlsdGVyKHRoaXMucHJvcHMuZmlsdGVyKVxuICAgICAgOiB0aGlzLnByb3BzLm1vZGVsLnJlc3VsdHMoKVxuICAgIHJldHVybiBBcnJheS5mcm9tKGl0ZW1zKS5tYXAoKGl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IHZpZXcgPSA8T3V0cHV0UGFuZWxJdGVtIG1vZGVsPXtpdGVtfSAvPlxuICAgICAgdGhpcy5pdGVtTWFwLnNldChpdGVtLCB2aWV3IGFzIGFueSlcbiAgICAgIHJldHVybiB2aWV3XG4gICAgfSlcbiAgfVxufVxuIl19