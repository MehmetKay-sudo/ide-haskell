"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
const _1 = require("./");
const AtomTypes = require("atom");
var CompositeDisposable = AtomTypes.CompositeDisposable;
function instance(pluginManager, options, featureSet) {
    const pluginName = options.name;
    const disposables = new CompositeDisposable();
    const messageProvider = pluginManager.resultsDB.registerProvider(options.messageTypes !== undefined ? Object.keys(options.messageTypes) : []);
    disposables.add(messageProvider);
    disposables.add(_1.consume(pluginManager, options, featureSet));
    return {
        setMenu(name, menu) {
            const menuDisp = atom.menu.add([
                {
                    label: utils_1.MAIN_MENU_LABEL,
                    submenu: [{ label: name, submenu: menu }],
                },
            ]);
            disposables.add(menuDisp);
            return menuDisp;
        },
        setStatus(status) {
            return pluginManager.backendStatus(pluginName, status);
        },
        setMessages(messages) {
            messageProvider.setMessages(messages);
        },
        async addMessageTab(name, opts) {
            return pluginManager.outputPanel.createTab(name, opts);
        },
        async showTooltip({ editor, eventType, detail, tooltip, }) {
            if (eventType === undefined) {
                eventType = utils_1.getEventType(detail);
            }
            return pluginManager.tooltipRegistry.showTooltip(editor, eventType, {
                pluginName,
                tooltip,
            });
        },
        addPanelControl(def) {
            return pluginManager.outputPanel.addPanelControl(def);
        },
        addConfigParam(paramName, spec) {
            return pluginManager.configParamManager.add(pluginName, paramName, spec);
        },
        async getConfigParam(name) {
            return pluginManager.configParamManager.get(pluginName, name);
        },
        async getOthersConfigParam(plugin, name) {
            return pluginManager.configParamManager.get(plugin, name);
        },
        async setConfigParam(name, value) {
            return pluginManager.configParamManager.set(pluginName, name, value);
        },
        getEventRange(editor, typeOrDetail) {
            let type;
            if (utils_1.isTEventRangeType(typeOrDetail)) {
                type = typeOrDetail;
            }
            else {
                type = utils_1.getEventType(typeOrDetail);
            }
            const controller = pluginManager.controller(editor);
            if (!controller) {
                return undefined;
            }
            return controller.getEventRange(type);
        },
        dispose() {
            disposables.dispose();
        },
    };
}
exports.instance = instance;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFuY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXBpLTMvaW5zdGFuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvQ0FBMkU7QUFFM0UseUJBQXdDO0FBRXhDLGtDQUFpQztBQUNqQyxJQUFPLG1CQUFtQixHQUFHLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQTtBQUkxRCxTQUFnQixRQUFRLENBQ3RCLGFBQTRCLEVBQzVCLE9BQWlDLEVBQ2pDLFVBQXNCO0lBRXRCLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUE7SUFDL0IsTUFBTSxXQUFXLEdBQUcsSUFBSSxtQkFBbUIsRUFBRSxDQUFBO0lBQzdDLE1BQU0sZUFBZSxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQzlELE9BQU8sQ0FBQyxZQUFZLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUM1RSxDQUFBO0lBQ0QsV0FBVyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQTtJQUNoQyxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQU8sQ0FBQyxhQUFhLEVBQUUsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUE7SUFFNUQsT0FBTztRQUNMLE9BQU8sQ0FBQyxJQUFZLEVBQUUsSUFBMEM7WUFDOUQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7Z0JBQzdCO29CQUNFLEtBQUssRUFBRSx1QkFBZTtvQkFDdEIsT0FBTyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztpQkFDMUM7YUFDRixDQUFDLENBQUE7WUFDRixXQUFXLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBQ3pCLE9BQU8sUUFBUSxDQUFBO1FBQ2pCLENBQUM7UUFDRCxTQUFTLENBQUMsTUFBbUI7WUFDM0IsT0FBTyxhQUFhLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUN4RCxDQUFDO1FBQ0QsV0FBVyxDQUFDLFFBQTJCO1lBQ3JDLGVBQWUsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDdkMsQ0FBQztRQUNELEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBWSxFQUFFLElBQWdDO1lBQ2hFLE9BQU8sYUFBYSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQ3hELENBQUM7UUFDRCxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQ2hCLE1BQU0sRUFDTixTQUFTLEVBQ1QsTUFBTSxFQUNOLE9BQU8sR0FDZ0I7WUFDdkIsSUFBSSxTQUFTLEtBQUssU0FBUyxFQUFFO2dCQUMzQixTQUFTLEdBQUcsb0JBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQTthQUNqQztZQUNELE9BQU8sYUFBYSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRTtnQkFDbEUsVUFBVTtnQkFDVixPQUFPO2FBQ1IsQ0FBQyxDQUFBO1FBQ0osQ0FBQztRQUNELGVBQWUsQ0FBSSxHQUE4QjtZQUMvQyxPQUFPLGFBQWEsQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3ZELENBQUM7UUFDRCxjQUFjLENBQUksU0FBaUIsRUFBRSxJQUF1QjtZQUMxRCxPQUFPLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUMxRSxDQUFDO1FBQ0QsS0FBSyxDQUFDLGNBQWMsQ0FBSSxJQUFZO1lBQ2xDLE9BQU8sYUFBYSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBSSxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDbEUsQ0FBQztRQUNELEtBQUssQ0FBQyxvQkFBb0IsQ0FDeEIsTUFBYyxFQUNkLElBQVk7WUFFWixPQUFPLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUksTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQzlELENBQUM7UUFDRCxLQUFLLENBQUMsY0FBYyxDQUFJLElBQVksRUFBRSxLQUFTO1lBQzdDLE9BQU8sYUFBYSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBSSxVQUFVLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQ3pFLENBQUM7UUFDRCxhQUFhLENBQUMsTUFBa0IsRUFBRSxZQUFzQztZQUN0RSxJQUFJLElBQXFCLENBQUE7WUFDekIsSUFBSSx5QkFBaUIsQ0FBQyxZQUFZLENBQUMsRUFBRTtnQkFDbkMsSUFBSSxHQUFHLFlBQVksQ0FBQTthQUNwQjtpQkFBTTtnQkFDTCxJQUFJLEdBQUcsb0JBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQTthQUNsQztZQUNELE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDbkQsSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDZixPQUFPLFNBQVMsQ0FBQTthQUNqQjtZQUNELE9BQU8sVUFBVSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUN2QyxDQUFDO1FBQ0QsT0FBTztZQUNMLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUN2QixDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFsRkQsNEJBa0ZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTUFJTl9NRU5VX0xBQkVMLCBnZXRFdmVudFR5cGUsIGlzVEV2ZW50UmFuZ2VUeXBlIH0gZnJvbSAnLi4vdXRpbHMnXG5pbXBvcnQgeyBQbHVnaW5NYW5hZ2VyIH0gZnJvbSAnLi4vcGx1Z2luLW1hbmFnZXInXG5pbXBvcnQgeyBjb25zdW1lLCBGZWF0dXJlU2V0IH0gZnJvbSAnLi8nXG5pbXBvcnQgKiBhcyBVUEkgZnJvbSAnYXRvbS1oYXNrZWxsLXVwaSdcbmltcG9ydCAqIGFzIEF0b21UeXBlcyBmcm9tICdhdG9tJ1xuaW1wb3J0IENvbXBvc2l0ZURpc3Bvc2FibGUgPSBBdG9tVHlwZXMuQ29tcG9zaXRlRGlzcG9zYWJsZVxuaW1wb3J0IFRleHRFZGl0b3IgPSBBdG9tVHlwZXMuVGV4dEVkaXRvclxuaW1wb3J0IFRFdmVudFJhbmdlVHlwZSA9IFVQSS5URXZlbnRSYW5nZVR5cGVcblxuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbmNlKFxuICBwbHVnaW5NYW5hZ2VyOiBQbHVnaW5NYW5hZ2VyLFxuICBvcHRpb25zOiBVUEkuSVJlZ2lzdHJhdGlvbk9wdGlvbnMsXG4gIGZlYXR1cmVTZXQ6IEZlYXR1cmVTZXQsXG4pOiBVUEkuSVVQSUluc3RhbmNlIHtcbiAgY29uc3QgcGx1Z2luTmFtZSA9IG9wdGlvbnMubmFtZVxuICBjb25zdCBkaXNwb3NhYmxlcyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgY29uc3QgbWVzc2FnZVByb3ZpZGVyID0gcGx1Z2luTWFuYWdlci5yZXN1bHRzREIucmVnaXN0ZXJQcm92aWRlcihcbiAgICBvcHRpb25zLm1lc3NhZ2VUeXBlcyAhPT0gdW5kZWZpbmVkID8gT2JqZWN0LmtleXMob3B0aW9ucy5tZXNzYWdlVHlwZXMpIDogW10sXG4gIClcbiAgZGlzcG9zYWJsZXMuYWRkKG1lc3NhZ2VQcm92aWRlcilcbiAgZGlzcG9zYWJsZXMuYWRkKGNvbnN1bWUocGx1Z2luTWFuYWdlciwgb3B0aW9ucywgZmVhdHVyZVNldCkpXG5cbiAgcmV0dXJuIHtcbiAgICBzZXRNZW51KG5hbWU6IHN0cmluZywgbWVudTogUmVhZG9ubHlBcnJheTxBdG9tVHlwZXMuTWVudU9wdGlvbnM+KSB7XG4gICAgICBjb25zdCBtZW51RGlzcCA9IGF0b20ubWVudS5hZGQoW1xuICAgICAgICB7XG4gICAgICAgICAgbGFiZWw6IE1BSU5fTUVOVV9MQUJFTCxcbiAgICAgICAgICBzdWJtZW51OiBbeyBsYWJlbDogbmFtZSwgc3VibWVudTogbWVudSB9XSxcbiAgICAgICAgfSxcbiAgICAgIF0pXG4gICAgICBkaXNwb3NhYmxlcy5hZGQobWVudURpc3ApXG4gICAgICByZXR1cm4gbWVudURpc3BcbiAgICB9LFxuICAgIHNldFN0YXR1cyhzdGF0dXM6IFVQSS5JU3RhdHVzKSB7XG4gICAgICByZXR1cm4gcGx1Z2luTWFuYWdlci5iYWNrZW5kU3RhdHVzKHBsdWdpbk5hbWUsIHN0YXR1cylcbiAgICB9LFxuICAgIHNldE1lc3NhZ2VzKG1lc3NhZ2VzOiBVUEkuSVJlc3VsdEl0ZW1bXSkge1xuICAgICAgbWVzc2FnZVByb3ZpZGVyLnNldE1lc3NhZ2VzKG1lc3NhZ2VzKVxuICAgIH0sXG4gICAgYXN5bmMgYWRkTWVzc2FnZVRhYihuYW1lOiBzdHJpbmcsIG9wdHM6IFVQSS5JU2V2ZXJpdHlUYWJEZWZpbml0aW9uKSB7XG4gICAgICByZXR1cm4gcGx1Z2luTWFuYWdlci5vdXRwdXRQYW5lbC5jcmVhdGVUYWIobmFtZSwgb3B0cylcbiAgICB9LFxuICAgIGFzeW5jIHNob3dUb29sdGlwKHtcbiAgICAgIGVkaXRvcixcbiAgICAgIGV2ZW50VHlwZSxcbiAgICAgIGRldGFpbCxcbiAgICAgIHRvb2x0aXAsXG4gICAgfTogVVBJLklTaG93VG9vbHRpcFBhcmFtcykge1xuICAgICAgaWYgKGV2ZW50VHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGV2ZW50VHlwZSA9IGdldEV2ZW50VHlwZShkZXRhaWwpXG4gICAgICB9XG4gICAgICByZXR1cm4gcGx1Z2luTWFuYWdlci50b29sdGlwUmVnaXN0cnkuc2hvd1Rvb2x0aXAoZWRpdG9yLCBldmVudFR5cGUsIHtcbiAgICAgICAgcGx1Z2luTmFtZSxcbiAgICAgICAgdG9vbHRpcCxcbiAgICAgIH0pXG4gICAgfSxcbiAgICBhZGRQYW5lbENvbnRyb2w8VD4oZGVmOiBVUEkuVENvbnRyb2xEZWZpbml0aW9uPFQ+KSB7XG4gICAgICByZXR1cm4gcGx1Z2luTWFuYWdlci5vdXRwdXRQYW5lbC5hZGRQYW5lbENvbnRyb2woZGVmKVxuICAgIH0sXG4gICAgYWRkQ29uZmlnUGFyYW08VD4ocGFyYW1OYW1lOiBzdHJpbmcsIHNwZWM6IFVQSS5JUGFyYW1TcGVjPFQ+KSB7XG4gICAgICByZXR1cm4gcGx1Z2luTWFuYWdlci5jb25maWdQYXJhbU1hbmFnZXIuYWRkKHBsdWdpbk5hbWUsIHBhcmFtTmFtZSwgc3BlYylcbiAgICB9LFxuICAgIGFzeW5jIGdldENvbmZpZ1BhcmFtPFQ+KG5hbWU6IHN0cmluZyk6IFByb21pc2U8VCB8IHVuZGVmaW5lZD4ge1xuICAgICAgcmV0dXJuIHBsdWdpbk1hbmFnZXIuY29uZmlnUGFyYW1NYW5hZ2VyLmdldDxUPihwbHVnaW5OYW1lLCBuYW1lKVxuICAgIH0sXG4gICAgYXN5bmMgZ2V0T3RoZXJzQ29uZmlnUGFyYW08VD4oXG4gICAgICBwbHVnaW46IHN0cmluZyxcbiAgICAgIG5hbWU6IHN0cmluZyxcbiAgICApOiBQcm9taXNlPFQgfCB1bmRlZmluZWQ+IHtcbiAgICAgIHJldHVybiBwbHVnaW5NYW5hZ2VyLmNvbmZpZ1BhcmFtTWFuYWdlci5nZXQ8VD4ocGx1Z2luLCBuYW1lKVxuICAgIH0sXG4gICAgYXN5bmMgc2V0Q29uZmlnUGFyYW08VD4obmFtZTogc3RyaW5nLCB2YWx1ZT86IFQpOiBQcm9taXNlPFQgfCB1bmRlZmluZWQ+IHtcbiAgICAgIHJldHVybiBwbHVnaW5NYW5hZ2VyLmNvbmZpZ1BhcmFtTWFuYWdlci5zZXQ8VD4ocGx1Z2luTmFtZSwgbmFtZSwgdmFsdWUpXG4gICAgfSxcbiAgICBnZXRFdmVudFJhbmdlKGVkaXRvcjogVGV4dEVkaXRvciwgdHlwZU9yRGV0YWlsOiBURXZlbnRSYW5nZVR5cGUgfCBPYmplY3QpIHtcbiAgICAgIGxldCB0eXBlOiBURXZlbnRSYW5nZVR5cGVcbiAgICAgIGlmIChpc1RFdmVudFJhbmdlVHlwZSh0eXBlT3JEZXRhaWwpKSB7XG4gICAgICAgIHR5cGUgPSB0eXBlT3JEZXRhaWxcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHR5cGUgPSBnZXRFdmVudFR5cGUodHlwZU9yRGV0YWlsKVxuICAgICAgfVxuICAgICAgY29uc3QgY29udHJvbGxlciA9IHBsdWdpbk1hbmFnZXIuY29udHJvbGxlcihlZGl0b3IpXG4gICAgICBpZiAoIWNvbnRyb2xsZXIpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRyb2xsZXIuZ2V0RXZlbnRSYW5nZSh0eXBlKVxuICAgIH0sXG4gICAgZGlzcG9zZSgpIHtcbiAgICAgIGRpc3Bvc2FibGVzLmRpc3Bvc2UoKVxuICAgIH0sXG4gIH1cbn1cbiJdfQ==