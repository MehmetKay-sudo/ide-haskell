"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
const _1 = require("./");
const AtomTypes = require("atom");
var CompositeDisposable = AtomTypes.CompositeDisposable;
function instance(pluginManager, options, featureSet) {
    const pluginName = options.name;
    const disposables = new CompositeDisposable();
    const messageProvider = pluginManager.resultsDB.registerProvider(options.messageTypes !== undefined ? Object.keys(options.messageTypes) : []);
    disposables.add(messageProvider);
    disposables.add(_1.consume(pluginManager, options, featureSet));
    return {
        setMenu(name, menu) {
            const menuDisp = atom.menu.add([
                {
                    label: utils_1.MAIN_MENU_LABEL,
                    submenu: [{ label: name, submenu: menu }],
                },
            ]);
            disposables.add(menuDisp);
            return menuDisp;
        },
        setStatus(status) {
            return pluginManager.forceBackendStatus(pluginName, status);
        },
        setMessages(messages) {
            messageProvider.setMessages(messages);
        },
        async addMessageTab(name, opts) {
            return pluginManager.outputPanel.createTab(name, opts);
        },
        async showTooltip({ editor, eventType, detail, tooltip, }) {
            if (eventType === undefined) {
                eventType = utils_1.getEventType(detail);
            }
            return pluginManager.tooltipRegistry.showTooltip(editor, eventType, {
                pluginName,
                tooltip,
            });
        },
        addPanelControl(def) {
            return pluginManager.outputPanel.addPanelControl(def);
        },
        addConfigParam(paramName, spec) {
            return pluginManager.configParamManager.add(pluginName, paramName, spec);
        },
        async getConfigParam(name) {
            return pluginManager.configParamManager.get(pluginName, name);
        },
        async getOthersConfigParam(plugin, name) {
            return pluginManager.configParamManager.get(plugin, name);
        },
        async setConfigParam(name, value) {
            return pluginManager.configParamManager.set(pluginName, name, value);
        },
        getEventRange(editor, typeOrDetail) {
            let type;
            if (utils_1.isTEventRangeType(typeOrDetail)) {
                type = typeOrDetail;
            }
            else {
                type = utils_1.getEventType(typeOrDetail);
            }
            const controller = pluginManager.controller(editor);
            if (!controller) {
                return undefined;
            }
            return controller.getEventRange(type);
        },
        dispose() {
            disposables.dispose();
        },
    };
}
exports.instance = instance;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFuY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXBpLTMvaW5zdGFuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvQ0FBMkU7QUFFM0UseUJBQXdDO0FBRXhDLGtDQUFpQztBQUNqQyxJQUFPLG1CQUFtQixHQUFHLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQTtBQUkxRCxTQUFnQixRQUFRLENBQ3RCLGFBQTRCLEVBQzVCLE9BQWlDLEVBQ2pDLFVBQXNCO0lBRXRCLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUE7SUFDL0IsTUFBTSxXQUFXLEdBQUcsSUFBSSxtQkFBbUIsRUFBRSxDQUFBO0lBQzdDLE1BQU0sZUFBZSxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQzlELE9BQU8sQ0FBQyxZQUFZLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUM1RSxDQUFBO0lBQ0QsV0FBVyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQTtJQUNoQyxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQU8sQ0FBQyxhQUFhLEVBQUUsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUE7SUFFNUQsT0FBTztRQUNMLE9BQU8sQ0FBQyxJQUFZLEVBQUUsSUFBMEM7WUFDOUQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7Z0JBQzdCO29CQUNFLEtBQUssRUFBRSx1QkFBZTtvQkFDdEIsT0FBTyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztpQkFDMUM7YUFDRixDQUFDLENBQUE7WUFDRixXQUFXLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBQ3pCLE9BQU8sUUFBUSxDQUFBO1FBQ2pCLENBQUM7UUFDRCxTQUFTLENBQUMsTUFBbUI7WUFDM0IsT0FBTyxhQUFhLENBQUMsa0JBQWtCLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBQzdELENBQUM7UUFDRCxXQUFXLENBQUMsUUFBMkI7WUFDckMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUN2QyxDQUFDO1FBQ0QsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFZLEVBQUUsSUFBZ0M7WUFDaEUsT0FBTyxhQUFhLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDeEQsQ0FBQztRQUNELEtBQUssQ0FBQyxXQUFXLENBQUMsRUFDaEIsTUFBTSxFQUNOLFNBQVMsRUFDVCxNQUFNLEVBQ04sT0FBTyxHQUNnQjtZQUN2QixJQUFJLFNBQVMsS0FBSyxTQUFTLEVBQUU7Z0JBQzNCLFNBQVMsR0FBRyxvQkFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFBO2FBQ2pDO1lBQ0QsT0FBTyxhQUFhLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFO2dCQUNsRSxVQUFVO2dCQUNWLE9BQU87YUFDUixDQUFDLENBQUE7UUFDSixDQUFDO1FBQ0QsZUFBZSxDQUFJLEdBQThCO1lBQy9DLE9BQU8sYUFBYSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDdkQsQ0FBQztRQUNELGNBQWMsQ0FBSSxTQUFpQixFQUFFLElBQXVCO1lBQzFELE9BQU8sYUFBYSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQzFFLENBQUM7UUFDRCxLQUFLLENBQUMsY0FBYyxDQUFJLElBQVk7WUFDbEMsT0FBTyxhQUFhLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFJLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUNsRSxDQUFDO1FBQ0QsS0FBSyxDQUFDLG9CQUFvQixDQUN4QixNQUFjLEVBQ2QsSUFBWTtZQUVaLE9BQU8sYUFBYSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBSSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDOUQsQ0FBQztRQUNELEtBQUssQ0FBQyxjQUFjLENBQUksSUFBWSxFQUFFLEtBQVM7WUFDN0MsT0FBTyxhQUFhLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFJLFVBQVUsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDekUsQ0FBQztRQUNELGFBQWEsQ0FBQyxNQUFrQixFQUFFLFlBQXNDO1lBQ3RFLElBQUksSUFBcUIsQ0FBQTtZQUN6QixJQUFJLHlCQUFpQixDQUFDLFlBQVksQ0FBQyxFQUFFO2dCQUNuQyxJQUFJLEdBQUcsWUFBWSxDQUFBO2FBQ3BCO2lCQUFNO2dCQUNMLElBQUksR0FBRyxvQkFBWSxDQUFDLFlBQVksQ0FBQyxDQUFBO2FBQ2xDO1lBQ0QsTUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUNuRCxJQUFJLENBQUMsVUFBVSxFQUFFO2dCQUNmLE9BQU8sU0FBUyxDQUFBO2FBQ2pCO1lBQ0QsT0FBTyxVQUFVLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ3ZDLENBQUM7UUFDRCxPQUFPO1lBQ0wsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ3ZCLENBQUM7S0FDRixDQUFBO0FBQ0gsQ0FBQztBQWxGRCw0QkFrRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNQUlOX01FTlVfTEFCRUwsIGdldEV2ZW50VHlwZSwgaXNURXZlbnRSYW5nZVR5cGUgfSBmcm9tICcuLi91dGlscydcbmltcG9ydCB7IFBsdWdpbk1hbmFnZXIgfSBmcm9tICcuLi9wbHVnaW4tbWFuYWdlcidcbmltcG9ydCB7IGNvbnN1bWUsIEZlYXR1cmVTZXQgfSBmcm9tICcuLydcbmltcG9ydCAqIGFzIFVQSSBmcm9tICdhdG9tLWhhc2tlbGwtdXBpJ1xuaW1wb3J0ICogYXMgQXRvbVR5cGVzIGZyb20gJ2F0b20nXG5pbXBvcnQgQ29tcG9zaXRlRGlzcG9zYWJsZSA9IEF0b21UeXBlcy5Db21wb3NpdGVEaXNwb3NhYmxlXG5pbXBvcnQgVGV4dEVkaXRvciA9IEF0b21UeXBlcy5UZXh0RWRpdG9yXG5pbXBvcnQgVEV2ZW50UmFuZ2VUeXBlID0gVVBJLlRFdmVudFJhbmdlVHlwZVxuXG5leHBvcnQgZnVuY3Rpb24gaW5zdGFuY2UoXG4gIHBsdWdpbk1hbmFnZXI6IFBsdWdpbk1hbmFnZXIsXG4gIG9wdGlvbnM6IFVQSS5JUmVnaXN0cmF0aW9uT3B0aW9ucyxcbiAgZmVhdHVyZVNldDogRmVhdHVyZVNldCxcbik6IFVQSS5JVVBJSW5zdGFuY2Uge1xuICBjb25zdCBwbHVnaW5OYW1lID0gb3B0aW9ucy5uYW1lXG4gIGNvbnN0IGRpc3Bvc2FibGVzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICBjb25zdCBtZXNzYWdlUHJvdmlkZXIgPSBwbHVnaW5NYW5hZ2VyLnJlc3VsdHNEQi5yZWdpc3RlclByb3ZpZGVyKFxuICAgIG9wdGlvbnMubWVzc2FnZVR5cGVzICE9PSB1bmRlZmluZWQgPyBPYmplY3Qua2V5cyhvcHRpb25zLm1lc3NhZ2VUeXBlcykgOiBbXSxcbiAgKVxuICBkaXNwb3NhYmxlcy5hZGQobWVzc2FnZVByb3ZpZGVyKVxuICBkaXNwb3NhYmxlcy5hZGQoY29uc3VtZShwbHVnaW5NYW5hZ2VyLCBvcHRpb25zLCBmZWF0dXJlU2V0KSlcblxuICByZXR1cm4ge1xuICAgIHNldE1lbnUobmFtZTogc3RyaW5nLCBtZW51OiBSZWFkb25seUFycmF5PEF0b21UeXBlcy5NZW51T3B0aW9ucz4pIHtcbiAgICAgIGNvbnN0IG1lbnVEaXNwID0gYXRvbS5tZW51LmFkZChbXG4gICAgICAgIHtcbiAgICAgICAgICBsYWJlbDogTUFJTl9NRU5VX0xBQkVMLFxuICAgICAgICAgIHN1Ym1lbnU6IFt7IGxhYmVsOiBuYW1lLCBzdWJtZW51OiBtZW51IH1dLFxuICAgICAgICB9LFxuICAgICAgXSlcbiAgICAgIGRpc3Bvc2FibGVzLmFkZChtZW51RGlzcClcbiAgICAgIHJldHVybiBtZW51RGlzcFxuICAgIH0sXG4gICAgc2V0U3RhdHVzKHN0YXR1czogVVBJLklTdGF0dXMpIHtcbiAgICAgIHJldHVybiBwbHVnaW5NYW5hZ2VyLmZvcmNlQmFja2VuZFN0YXR1cyhwbHVnaW5OYW1lLCBzdGF0dXMpXG4gICAgfSxcbiAgICBzZXRNZXNzYWdlcyhtZXNzYWdlczogVVBJLklSZXN1bHRJdGVtW10pIHtcbiAgICAgIG1lc3NhZ2VQcm92aWRlci5zZXRNZXNzYWdlcyhtZXNzYWdlcylcbiAgICB9LFxuICAgIGFzeW5jIGFkZE1lc3NhZ2VUYWIobmFtZTogc3RyaW5nLCBvcHRzOiBVUEkuSVNldmVyaXR5VGFiRGVmaW5pdGlvbikge1xuICAgICAgcmV0dXJuIHBsdWdpbk1hbmFnZXIub3V0cHV0UGFuZWwuY3JlYXRlVGFiKG5hbWUsIG9wdHMpXG4gICAgfSxcbiAgICBhc3luYyBzaG93VG9vbHRpcCh7XG4gICAgICBlZGl0b3IsXG4gICAgICBldmVudFR5cGUsXG4gICAgICBkZXRhaWwsXG4gICAgICB0b29sdGlwLFxuICAgIH06IFVQSS5JU2hvd1Rvb2x0aXBQYXJhbXMpIHtcbiAgICAgIGlmIChldmVudFR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBldmVudFR5cGUgPSBnZXRFdmVudFR5cGUoZGV0YWlsKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHBsdWdpbk1hbmFnZXIudG9vbHRpcFJlZ2lzdHJ5LnNob3dUb29sdGlwKGVkaXRvciwgZXZlbnRUeXBlLCB7XG4gICAgICAgIHBsdWdpbk5hbWUsXG4gICAgICAgIHRvb2x0aXAsXG4gICAgICB9KVxuICAgIH0sXG4gICAgYWRkUGFuZWxDb250cm9sPFQ+KGRlZjogVVBJLlRDb250cm9sRGVmaW5pdGlvbjxUPikge1xuICAgICAgcmV0dXJuIHBsdWdpbk1hbmFnZXIub3V0cHV0UGFuZWwuYWRkUGFuZWxDb250cm9sKGRlZilcbiAgICB9LFxuICAgIGFkZENvbmZpZ1BhcmFtPFQ+KHBhcmFtTmFtZTogc3RyaW5nLCBzcGVjOiBVUEkuSVBhcmFtU3BlYzxUPikge1xuICAgICAgcmV0dXJuIHBsdWdpbk1hbmFnZXIuY29uZmlnUGFyYW1NYW5hZ2VyLmFkZChwbHVnaW5OYW1lLCBwYXJhbU5hbWUsIHNwZWMpXG4gICAgfSxcbiAgICBhc3luYyBnZXRDb25maWdQYXJhbTxUPihuYW1lOiBzdHJpbmcpOiBQcm9taXNlPFQgfCB1bmRlZmluZWQ+IHtcbiAgICAgIHJldHVybiBwbHVnaW5NYW5hZ2VyLmNvbmZpZ1BhcmFtTWFuYWdlci5nZXQ8VD4ocGx1Z2luTmFtZSwgbmFtZSlcbiAgICB9LFxuICAgIGFzeW5jIGdldE90aGVyc0NvbmZpZ1BhcmFtPFQ+KFxuICAgICAgcGx1Z2luOiBzdHJpbmcsXG4gICAgICBuYW1lOiBzdHJpbmcsXG4gICAgKTogUHJvbWlzZTxUIHwgdW5kZWZpbmVkPiB7XG4gICAgICByZXR1cm4gcGx1Z2luTWFuYWdlci5jb25maWdQYXJhbU1hbmFnZXIuZ2V0PFQ+KHBsdWdpbiwgbmFtZSlcbiAgICB9LFxuICAgIGFzeW5jIHNldENvbmZpZ1BhcmFtPFQ+KG5hbWU6IHN0cmluZywgdmFsdWU/OiBUKTogUHJvbWlzZTxUIHwgdW5kZWZpbmVkPiB7XG4gICAgICByZXR1cm4gcGx1Z2luTWFuYWdlci5jb25maWdQYXJhbU1hbmFnZXIuc2V0PFQ+KHBsdWdpbk5hbWUsIG5hbWUsIHZhbHVlKVxuICAgIH0sXG4gICAgZ2V0RXZlbnRSYW5nZShlZGl0b3I6IFRleHRFZGl0b3IsIHR5cGVPckRldGFpbDogVEV2ZW50UmFuZ2VUeXBlIHwgT2JqZWN0KSB7XG4gICAgICBsZXQgdHlwZTogVEV2ZW50UmFuZ2VUeXBlXG4gICAgICBpZiAoaXNURXZlbnRSYW5nZVR5cGUodHlwZU9yRGV0YWlsKSkge1xuICAgICAgICB0eXBlID0gdHlwZU9yRGV0YWlsXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0eXBlID0gZ2V0RXZlbnRUeXBlKHR5cGVPckRldGFpbClcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBwbHVnaW5NYW5hZ2VyLmNvbnRyb2xsZXIoZWRpdG9yKVxuICAgICAgaWYgKCFjb250cm9sbGVyKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250cm9sbGVyLmdldEV2ZW50UmFuZ2UodHlwZSlcbiAgICB9LFxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICBkaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgICB9LFxuICB9XG59XG4iXX0=