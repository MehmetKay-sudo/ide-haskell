"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const atom_1 = require("atom");
const utils_1 = require("../utils");
tslib_1.__exportStar(require("./instance"), exports);
function consume(pluginManager, options, featureSet) {
    const { name, menu, messageTypes, events, controls, params, tooltip, } = options;
    const disp = new atom_1.CompositeDisposable();
    let messageProvider;
    if (menu) {
        const menuDisp = atom.menu.add([
            {
                label: utils_1.MAIN_MENU_LABEL,
                submenu: [{ label: menu.label, submenu: menu.menu }],
            },
        ]);
        disp.add(menuDisp);
    }
    if (messageTypes) {
        if (featureSet.eventsReturnResults) {
            messageProvider = pluginManager.resultsDB.registerProvider(Object.keys(messageTypes));
        }
        for (const type of Object.keys(messageTypes)) {
            const opts = messageTypes[type];
            pluginManager.outputPanel.createTab(type, opts);
        }
    }
    if (events) {
        if (events.onWillSaveBuffer) {
            disp.add(registerEvent(name, pluginManager, messageProvider, events.onWillSaveBuffer, pluginManager.onWillSaveBuffer));
        }
        if (events.onDidSaveBuffer) {
            disp.add(registerEvent(name, pluginManager, messageProvider, events.onDidSaveBuffer, pluginManager.onDidSaveBuffer));
        }
        if (events.onDidStopChanging) {
            disp.add(registerEvent(name, pluginManager, messageProvider, events.onDidStopChanging, pluginManager.onDidStopChanging));
        }
    }
    if (tooltip) {
        let handler;
        let priority;
        let eventTypes;
        if (typeof tooltip === 'function') {
            handler = tooltip;
        }
        else {
            ;
            ({ handler, priority, eventTypes } = tooltip);
        }
        if (priority === undefined) {
            priority = 100;
        }
        disp.add(pluginManager.tooltipRegistry.register(name, {
            priority,
            handler,
            eventTypes,
        }));
    }
    if (controls) {
        for (const i of controls) {
            disp.add(pluginManager.outputPanel.addPanelControl(i));
        }
    }
    if (params) {
        for (const paramName of Object.keys(params)) {
            const spec = params[paramName];
            disp.add(pluginManager.configParamManager.add(name, paramName, spec));
        }
    }
    return disp;
}
exports.consume = consume;
function registerEvent(name, manager, provider, cb, reg) {
    function wrapStatus(cb) {
        return async function (buffer) {
            try {
                manager.backendStatus(name, { status: 'progress', detail: '' });
                const res = await cb(buffer);
                if (provider && Array.isArray(res))
                    provider.setMessages(res);
                manager.backendStatus(name, { status: 'ready', detail: '' });
            }
            catch (e) {
                manager.backendStatus(name, { status: 'warning', detail: `${e}` });
                console.warn(e);
            }
        };
    }
    if (Array.isArray(cb)) {
        const disp = new atom_1.CompositeDisposable();
        for (const i of cb) {
            disp.add(reg(wrapStatus(i)));
        }
        return disp;
    }
    else {
        return reg(wrapStatus(cb));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXBpLTMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0JBQWtFO0FBR2xFLG9DQUEwQztBQUsxQyxxREFBMEI7QUFNMUIsU0FBZ0IsT0FBTyxDQUNyQixhQUE0QixFQUM1QixPQUFpQyxFQUNqQyxVQUFzQjtJQUV0QixNQUFNLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixZQUFZLEVBQ1osTUFBTSxFQUNOLFFBQVEsRUFDUixNQUFNLEVBQ04sT0FBTyxHQUNSLEdBQUcsT0FBTyxDQUFBO0lBQ1gsTUFBTSxJQUFJLEdBQUcsSUFBSSwwQkFBbUIsRUFBRSxDQUFBO0lBQ3RDLElBQUksZUFBcUMsQ0FBQTtJQUV6QyxJQUFJLElBQUksRUFBRTtRQUNSLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQzdCO2dCQUNFLEtBQUssRUFBRSx1QkFBZTtnQkFDdEIsT0FBTyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ3JEO1NBQ0YsQ0FBQyxDQUFBO1FBQ0YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtLQUNuQjtJQUNELElBQUksWUFBWSxFQUFFO1FBQ2hCLElBQUksVUFBVSxDQUFDLG1CQUFtQixFQUFFO1lBQ2xDLGVBQWUsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUN4RCxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUMxQixDQUFBO1NBQ0Y7UUFFRCxLQUFLLE1BQU0sSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDNUMsTUFBTSxJQUFJLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFBO1lBRS9CLGFBQWEsQ0FBQyxXQUFX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RUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO2FBQzdEO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtnQkFDbEUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTthQUNoQjtRQUNILENBQUMsQ0FBQTtJQUNILENBQUM7SUFDRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDckIsTUFBTSxJQUFJLEdBQUcsSUFBSSwwQkFBbUIsRUFBRSxDQUFBO1FBQ3RDLEtBQUssTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDN0I7UUFDRCxPQUFPLElBQUksQ0FBQTtLQUNaO1NBQU07UUFDTCxPQUFPLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtLQUMzQjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXh0QnVmZmVyLCBDb21wb3NpdGVEaXNwb3NhYmxlLCBEaXNwb3NhYmxlIH0gZnJvbSAnYXRvbSdcblxuaW1wb3J0IHsgUGx1Z2luTWFuYWdlciB9IGZyb20gJy4uL3BsdWdpbi1tYW5hZ2VyJ1xuaW1wb3J0IHsgTUFJTl9NRU5VX0xBQkVMIH0gZnJvbSAnLi4vdXRpbHMnXG5pbXBvcnQgKiBhcyBVUEkgZnJvbSAnYXRvbS1oYXNrZWxsLXVwaSdcbmltcG9ydCBURXZlbnRSYW5nZVR5cGUgPSBVUEkuVEV2ZW50UmFuZ2VUeXBlXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJy4uL3Jlc3VsdHMtZGIvcHJvdmlkZXInXG5cbmV4cG9ydCAqIGZyb20gJy4vaW5zdGFuY2UnXG5cbmV4cG9ydCBpbnRlcmZhY2UgRmVhdHVyZVNldCB7XG4gIGV2ZW50c1JldHVyblJlc3VsdHM6IGJvb2xlYW5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnN1bWUoXG4gIHBsdWdpbk1hbmFnZXI6IFBsdWdpbk1hbmFnZXIsXG4gIG9wdGlvbnM6IFVQSS5JUmVnaXN0cmF0aW9uT3B0aW9ucyxcbiAgZmVhdHVyZVNldDogRmVhdHVyZVNldCxcbik6IERpc3Bvc2FibGUge1xuICBjb25zdCB7XG4gICAgbmFtZSxcbiAgICBtZW51LFxuICAgIG1lc3NhZ2VUeXBlcyxcbiAgICBldmVudHMsXG4gICAgY29udHJvbHMsXG4gICAgcGFyYW1zLFxuICAgIHRvb2x0aXAsXG4gIH0gPSBvcHRpb25zXG4gIGNvbnN0IGRpc3AgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gIGxldCBtZXNzYWdlUHJvdmlkZXI6IFByb3ZpZGVyIHwgdW5kZWZpbmVkXG5cbiAgaWYgKG1lbnUpIHtcbiAgICBjb25zdCBtZW51RGlzcCA9IGF0b20ubWVudS5hZGQoW1xuICAgICAge1xuICAgICAgICBsYWJlbDogTUFJTl9NRU5VX0xBQkVMLFxuICAgICAgICBzdWJtZW51OiBbeyBsYWJlbDogbWVudS5sYWJlbCwgc3VibWVudTogbWVudS5tZW51IH1dLFxuICAgICAgfSxcbiAgICBdKVxuICAgIGRpc3AuYWRkKG1lbnVEaXNwKVxuICB9XG4gIGlmIChtZXNzYWdlVHlwZXMpIHtcbiAgICBpZiAoZmVhdHVyZVNldC5ldmVudHNSZXR1cm5SZXN1bHRzKSB7XG4gICAgICBtZXNzYWdlUHJvdmlkZXIgPSBwbHVnaW5NYW5hZ2VyLnJlc3VsdHNEQi5yZWdpc3RlclByb3ZpZGVyKFxuICAgICAgICBPYmplY3Qua2V5cyhtZXNzYWdlVHlwZXMpLFxuICAgICAgKVxuICAgIH1cbiAgICAvLyBUT0RPOiBtYWtlIGRpc3Bvc2FibGVcbiAgICBmb3IgKGNvbnN0IHR5cGUgb2YgT2JqZWN0LmtleXMobWVzc2FnZVR5cGVzKSkge1xuICAgICAgY29uc3Qgb3B0cyA9IG1lc3NhZ2VUeXBlc1t0eXBlXVxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWZsb2F0aW5nLXByb21pc2VzXG4gICAgICBwbHVnaW5NYW5hZ2VyLm91dHB1dFBhbmVsLmNyZWF0ZVRhYih0eXBlLCBvcHRzKVxuICAgIH1cbiAgfVxuICBpZiAoZXZlbnRzKSB7XG4gICAgaWYgKGV2ZW50cy5vbldpbGxTYXZlQnVmZmVyKSB7XG4gICAgICBkaXNwLmFkZChcbiAgICAgICAgcmVnaXN0ZXJFdmVudChcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIHBsdWdpbk1hbmFnZXIsXG4gICAgICAgICAgbWVzc2FnZVByb3ZpZGVyLFxuICAgICAgICAgIGV2ZW50cy5vbldpbGxTYXZlQnVmZmVyLFxuICAgICAgICAgIHBsdWdpbk1hbmFnZXIub25XaWxsU2F2ZUJ1ZmZlcixcbiAgICAgICAgKSxcbiAgICAgIClcbiAgICB9XG4gICAgaWYgKGV2ZW50cy5vbkRpZFNhdmVCdWZmZXIpIHtcbiAgICAgIGRpc3AuYWRkKFxuICAgICAgICByZWdpc3RlckV2ZW50KFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgcGx1Z2luTWFuYWdlcixcbiAgICAgICAgICBtZXNzYWdlUHJvdmlkZXIsXG4gICAgICAgICAgZXZlbnRzLm9uRGlkU2F2ZUJ1ZmZlcixcbiAgICAgICAgICBwbHVnaW5NYW5hZ2VyLm9uRGlkU2F2ZUJ1ZmZlcixcbiAgICAgICAgKSxcbiAgICAgIClcbiAgICB9XG4gICAgaWYgKGV2ZW50cy5vbkRpZFN0b3BDaGFuZ2luZykge1xuICAgICAgZGlzcC5hZGQoXG4gICAgICAgIHJlZ2lzdGVyRXZlbnQoXG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICBwbHVnaW5NYW5hZ2VyLFxuICAgICAgICAgIG1lc3NhZ2VQcm92aWRlcixcbiAgICAgICAgICBldmVudHMub25EaWRTdG9wQ2hhbmdpbmcsXG4gICAgICAgICAgcGx1Z2luTWFuYWdlci5vbkRpZFN0b3BDaGFuZ2luZyxcbiAgICAgICAgKSxcbiAgICAgIClcbiAgICB9XG4gIH1cbiAgaWYgKHRvb2x0aXApIHtcbiAgICBsZXQgaGFuZGxlcjogVVBJLlRUb29sdGlwSGFuZGxlclxuICAgIGxldCBwcmlvcml0eTogbnVtYmVyIHwgdW5kZWZpbmVkXG4gICAgbGV0IGV2ZW50VHlwZXM6IFRFdmVudFJhbmdlVHlwZVtdIHwgdW5kZWZpbmVkXG4gICAgaWYgKHR5cGVvZiB0b29sdGlwID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBoYW5kbGVyID0gdG9vbHRpcFxuICAgIH0gZWxzZSB7XG4gICAgICA7KHsgaGFuZGxlciwgcHJpb3JpdHksIGV2ZW50VHlwZXMgfSA9IHRvb2x0aXApXG4gICAgfVxuICAgIGlmIChwcmlvcml0eSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBwcmlvcml0eSA9IDEwMFxuICAgIH1cbiAgICBkaXNwLmFkZChcbiAgICAgIHBsdWdpbk1hbmFnZXIudG9vbHRpcFJlZ2lzdHJ5LnJlZ2lzdGVyKG5hbWUsIHtcbiAgICAgICAgcHJpb3JpdHksXG4gICAgICAgIGhhbmRsZXIsXG4gICAgICAgIGV2ZW50VHlwZXMsXG4gICAgICB9KSxcbiAgICApXG4gIH1cbiAgaWYgKGNvbnRyb2xzKSB7XG4gICAgZm9yIChjb25zdCBpIG9mIGNvbnRyb2xzKSB7XG4gICAgICBkaXNwLmFkZChwbHVnaW5NYW5hZ2VyLm91dHB1dFBhbmVsLmFkZFBhbmVsQ29udHJvbChpKSlcbiAgICB9XG4gIH1cbiAgaWYgKHBhcmFtcykge1xuICAgIGZvciAoY29uc3QgcGFyYW1OYW1lIG9mIE9iamVjdC5rZXlzKHBhcmFtcykpIHtcbiAgICAgIGNvbnN0IHNwZWMgPSBwYXJhbXNbcGFyYW1OYW1lXVxuICAgICAgZGlzcC5hZGQocGx1Z2luTWFuYWdlci5jb25maWdQYXJhbU1hbmFnZXIuYWRkKG5hbWUsIHBhcmFtTmFtZSwgc3BlYykpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRpc3Bcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJFdmVudChcbiAgbmFtZTogc3RyaW5nLFxuICBtYW5hZ2VyOiBQbHVnaW5NYW5hZ2VyLFxuICBwcm92aWRlcjogUHJvdmlkZXIgfCB1bmRlZmluZWQsXG4gIGNiOiBVUEkuVFNpbmdsZU9yQXJyYXk8VVBJLlRUZXh0QnVmZmVyQ2FsbGJhY2s+LFxuICByZWc6IChjYjogVVBJLlRUZXh0QnVmZmVyQ2FsbGJhY2spID0+IERpc3Bvc2FibGUsXG4pIHtcbiAgZnVuY3Rpb24gd3JhcFN0YXR1cyhjYjogVVBJLlRUZXh0QnVmZmVyQ2FsbGJhY2spIHtcbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24oYnVmZmVyOiBUZXh0QnVmZmVyKSB7XG4gICAgICB0cnkge1xuICAgICAgICBtYW5hZ2VyLmJhY2tlbmRTdGF0dXMobmFtZSwgeyBzdGF0dXM6ICdwcm9ncmVzcycsIGRldGFpbDogJycgfSlcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgY2IoYnVmZmVyKVxuICAgICAgICBpZiAocHJvdmlkZXIgJiYgQXJyYXkuaXNBcnJheShyZXMpKSBwcm92aWRlci5zZXRNZXNzYWdlcyhyZXMpXG4gICAgICAgIG1hbmFnZXIuYmFja2VuZFN0YXR1cyhuYW1lLCB7IHN0YXR1czogJ3JlYWR5JywgZGV0YWlsOiAnJyB9KVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBtYW5hZ2VyLmJhY2tlbmRTdGF0dXMobmFtZSwgeyBzdGF0dXM6ICd3YXJuaW5nJywgZGV0YWlsOiBgJHtlfWAgfSlcbiAgICAgICAgY29uc29sZS53YXJuKGUpXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KGNiKSkge1xuICAgIGNvbnN0IGRpc3AgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gICAgZm9yIChjb25zdCBpIG9mIGNiKSB7XG4gICAgICBkaXNwLmFkZChyZWcod3JhcFN0YXR1cyhpKSkpXG4gICAgfVxuICAgIHJldHVybiBkaXNwXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlZyh3cmFwU3RhdHVzKGNiKSlcbiAgfVxufVxuIl19