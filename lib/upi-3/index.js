"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const atom_1 = require("atom");
const utils_1 = require("../utils");
tslib_1.__exportStar(require("./instance"), exports);
function consume(pluginManager, options, featureSet) {
    const { name, menu, messageTypes, events, controls, params, tooltip, commands, } = options;
    const disp = new atom_1.CompositeDisposable();
    let messageProvider;
    if (menu) {
        const menuDisp = atom.menu.add([
            {
                label: utils_1.MAIN_MENU_LABEL,
                submenu: [{ label: menu.label, submenu: menu.menu }],
            },
        ]);
        disp.add(menuDisp);
    }
    if (messageTypes) {
        if (featureSet.eventsReturnResults) {
            messageProvider = pluginManager.resultsDB.registerProvider(Object.keys(messageTypes));
        }
        for (const type of Object.keys(messageTypes)) {
            const opts = messageTypes[type];
            pluginManager.outputPanel.createTab(type, opts);
        }
    }
    if (events) {
        if (events.onWillSaveBuffer) {
            disp.add(registerEvent(name, pluginManager, messageProvider, events.onWillSaveBuffer, pluginManager.onWillSaveBuffer));
        }
        if (events.onDidSaveBuffer) {
            disp.add(registerEvent(name, pluginManager, messageProvider, events.onDidSaveBuffer, pluginManager.onDidSaveBuffer));
        }
        if (events.onDidStopChanging) {
            disp.add(registerEvent(name, pluginManager, messageProvider, events.onDidStopChanging, pluginManager.onDidStopChanging));
        }
    }
    if (tooltip) {
        let handler;
        let priority;
        let eventTypes;
        if (typeof tooltip === 'function') {
            handler = tooltip;
        }
        else {
            ;
            ({ handler, priority, eventTypes } = tooltip);
        }
        if (priority === undefined) {
            priority = 100;
        }
        disp.add(pluginManager.tooltipRegistry.register(name, {
            priority,
            handler,
            eventTypes,
        }));
    }
    if (controls) {
        for (const i of controls) {
            disp.add(pluginManager.outputPanel.addPanelControl(i));
        }
    }
    if (params) {
        for (const paramName of Object.keys(params)) {
            const spec = params[paramName];
            disp.add(pluginManager.configParamManager.add(name, paramName, spec));
        }
    }
    if (featureSet.supportsCommands && commands) {
        for (const [target, cmds] of Object.entries(commands)) {
            if (cmds === undefined)
                continue;
            for (const [cmd, handler] of Object.entries(cmds)) {
                disp.add(atom.commands.add(target, cmd, function (event) {
                    wrapStatus(name, pluginManager, messageProvider, handler)(event.currentTarget).catch(function (e) {
                        atom.notifications.addError(e.toString(), {
                            detail: e.message,
                            dismissable: true,
                        });
                    });
                }));
            }
        }
    }
    return disp;
}
exports.consume = consume;
function registerEvent(name, manager, provider, cb, reg) {
    if (Array.isArray(cb)) {
        const disp = new atom_1.CompositeDisposable();
        for (const i of cb) {
            disp.add(reg(wrapStatus(name, manager, provider, i)));
        }
        return disp;
    }
    else {
        return reg(wrapStatus(name, manager, provider, cb));
    }
}
function wrapStatus(name, manager, provider, cb) {
    return async function (...args) {
        try {
            manager.backendStatus(name, { status: 'progress', detail: '' });
            const res = await Promise.resolve(cb(...args));
            if (provider && Array.isArray(res))
                provider.setMessages(res);
            manager.backendStatus(name, { status: 'ready', detail: '' });
        }
        catch (e) {
            manager.backendStatus(name, { status: 'warning', detail: `${e}` });
            console.warn(e);
        }
    };
}
//# sourceMappingURL=data:application/json;base64,