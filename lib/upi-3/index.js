"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const atom_1 = require("atom");
const utils_1 = require("../utils");
tslib_1.__exportStar(require("./instance"), exports);
function consume(pluginManager, options, featureSet) {
    const { name, menu, messageTypes, events, controls, params, tooltip, commands, } = options;
    const disp = new atom_1.CompositeDisposable();
    let messageProvider;
    if (menu) {
        const menuDisp = atom.menu.add([
            {
                label: utils_1.MAIN_MENU_LABEL,
                submenu: [{ label: menu.label, submenu: menu.menu }],
            },
        ]);
        disp.add(menuDisp);
    }
    if (messageTypes) {
        if (featureSet.eventsReturnResults) {
            messageProvider = pluginManager.resultsDB.registerProvider(Object.keys(messageTypes));
        }
        for (const type of Object.keys(messageTypes)) {
            const opts = messageTypes[type];
            utils_1.handlePromise(pluginManager.outputPanel.createTab(type, opts));
            disp.add(new atom_1.Disposable(function () {
                utils_1.handlePromise(pluginManager.outputPanel.removeTab(type));
            }));
        }
    }
    if (events) {
        if (events.onWillSaveBuffer) {
            disp.add(registerEvent(name, pluginManager, messageProvider, events.onWillSaveBuffer, pluginManager.onWillSaveBuffer));
        }
        if (events.onDidSaveBuffer) {
            disp.add(registerEvent(name, pluginManager, messageProvider, events.onDidSaveBuffer, pluginManager.onDidSaveBuffer));
        }
        if (events.onDidStopChanging) {
            disp.add(registerEvent(name, pluginManager, messageProvider, events.onDidStopChanging, pluginManager.onDidStopChanging));
        }
    }
    if (tooltip) {
        let handler;
        let priority;
        let eventTypes;
        if (typeof tooltip === 'function') {
            handler = tooltip;
        }
        else {
            ;
            ({ handler, priority, eventTypes } = tooltip);
        }
        if (priority === undefined) {
            priority = 100;
        }
        disp.add(pluginManager.tooltipRegistry.register(name, {
            priority,
            handler,
            eventTypes,
        }));
    }
    if (controls) {
        for (const i of controls) {
            disp.add(pluginManager.outputPanel.addPanelControl(i));
        }
    }
    if (params) {
        for (const paramName of Object.keys(params)) {
            const spec = params[paramName];
            disp.add(pluginManager.configParamManager.add(name, paramName, spec));
        }
    }
    if (featureSet.supportsCommands && commands) {
        for (const [target, cmds] of Object.entries(commands)) {
            if (cmds === undefined)
                continue;
            for (const [cmd, handler] of Object.entries(cmds)) {
                disp.add(atom.commands.add(target, cmd, function (event) {
                    wrapStatus(name, pluginManager, messageProvider, handler)(event.currentTarget).catch(function (e) {
                        atom.notifications.addError(e.toString(), {
                            detail: e.message,
                            dismissable: true,
                        });
                    });
                }));
            }
        }
    }
    return disp;
}
exports.consume = consume;
function registerEvent(name, manager, provider, cb, reg) {
    if (Array.isArray(cb)) {
        const disp = new atom_1.CompositeDisposable();
        for (const i of cb) {
            disp.add(reg(wrapStatus(name, manager, provider, i)));
        }
        return disp;
    }
    else {
        return reg(wrapStatus(name, manager, provider, cb));
    }
}
function wrapStatus(name, manager, provider, cb) {
    return async function (...args) {
        try {
            manager.backendStatus(name, { status: 'progress', detail: '' });
            const res = await Promise.resolve(cb(...args));
            if (provider && Array.isArray(res))
                provider.setMessages(res);
            manager.backendStatus(name, { status: 'ready', detail: '' });
        }
        catch (e) {
            manager.backendStatus(name, { status: 'warning', detail: `${e}` });
            console.warn(e);
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXBpLTMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0JBQXNEO0FBR3RELG9DQUF5RDtBQUt6RCxxREFBMEI7QUFPMUIsU0FBZ0IsT0FBTyxDQUNyQixhQUE0QixFQUM1QixPQUFpQyxFQUNqQyxVQUFzQjtJQUV0QixNQUFNLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixZQUFZLEVBQ1osTUFBTSxFQUNOLFFBQVEsRUFDUixNQUFNLEVBQ04sT0FBTyxFQUNQLFFBQVEsR0FDVCxHQUFHLE9BQU8sQ0FBQTtJQUNYLE1BQU0sSUFBSSxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtJQUN0QyxJQUFJLGVBQXFDLENBQUE7SUFFekMsSUFBSSxJQUFJLEVBQUU7UUFDUixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztZQUM3QjtnQkFDRSxLQUFLLEVBQUUsdUJBQWU7Z0JBQ3RCLE9BQU8sRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNyRDtTQUNGLENBQUMsQ0FBQTtRQUNGLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUE7S0FDbkI7SUFDRCxJQUFJLFlBQVksRUFBRTtRQUNoQixJQUFJLFVBQVUsQ0FBQyxtQkFBbUIsRUFBRTtZQUNsQyxlQUFlLEdBQUcsYUFBYSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FDeEQsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FDMUIsQ0FBQTtTQUNGO1FBQ0QsS0FBSyxNQUFNLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQzVDLE1BQU0sSUFBSSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUMvQixxQkFB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VTtRQUNqQyxJQUFJO1lBQ0YsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO1lBQy9ELE1BQU0sR0FBRyxHQUFHLE1BQU0sT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFBO1lBQzlDLElBQUksUUFBUSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO2dCQUFFLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDN0QsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO1NBQzdEO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO1lBQ2xFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDaEI7SUFDSCxDQUFDLENBQUE7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSwgRGlzcG9zYWJsZSB9IGZyb20gJ2F0b20nXG5cbmltcG9ydCB7IFBsdWdpbk1hbmFnZXIgfSBmcm9tICcuLi9wbHVnaW4tbWFuYWdlcidcbmltcG9ydCB7IE1BSU5fTUVOVV9MQUJFTCwgaGFuZGxlUHJvbWlzZSB9IGZyb20gJy4uL3V0aWxzJ1xuaW1wb3J0ICogYXMgVVBJIGZyb20gJ2F0b20taGFza2VsbC11cGknXG5pbXBvcnQgVEV2ZW50UmFuZ2VUeXBlID0gVVBJLlRFdmVudFJhbmdlVHlwZVxuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICcuLi9yZXN1bHRzLWRiL3Byb3ZpZGVyJ1xuXG5leHBvcnQgKiBmcm9tICcuL2luc3RhbmNlJ1xuXG5leHBvcnQgaW50ZXJmYWNlIEZlYXR1cmVTZXQge1xuICBldmVudHNSZXR1cm5SZXN1bHRzPzogYm9vbGVhblxuICBzdXBwb3J0c0NvbW1hbmRzPzogYm9vbGVhblxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29uc3VtZShcbiAgcGx1Z2luTWFuYWdlcjogUGx1Z2luTWFuYWdlcixcbiAgb3B0aW9uczogVVBJLklSZWdpc3RyYXRpb25PcHRpb25zLFxuICBmZWF0dXJlU2V0OiBGZWF0dXJlU2V0LFxuKTogRGlzcG9zYWJsZSB7XG4gIGNvbnN0IHtcbiAgICBuYW1lLFxuICAgIG1lbnUsXG4gICAgbWVzc2FnZVR5cGVzLFxuICAgIGV2ZW50cyxcbiAgICBjb250cm9scyxcbiAgICBwYXJhbXMsXG4gICAgdG9vbHRpcCxcbiAgICBjb21tYW5kcyxcbiAgfSA9IG9wdGlvbnNcbiAgY29uc3QgZGlzcCA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgbGV0IG1lc3NhZ2VQcm92aWRlcjogUHJvdmlkZXIgfCB1bmRlZmluZWRcblxuICBpZiAobWVudSkge1xuICAgIGNvbnN0IG1lbnVEaXNwID0gYXRvbS5tZW51LmFkZChbXG4gICAgICB7XG4gICAgICAgIGxhYmVsOiBNQUlOX01FTlVfTEFCRUwsXG4gICAgICAgIHN1Ym1lbnU6IFt7IGxhYmVsOiBtZW51LmxhYmVsLCBzdWJtZW51OiBtZW51Lm1lbnUgfV0sXG4gICAgICB9LFxuICAgIF0pXG4gICAgZGlzcC5hZGQobWVudURpc3ApXG4gIH1cbiAgaWYgKG1lc3NhZ2VUeXBlcykge1xuICAgIGlmIChmZWF0dXJlU2V0LmV2ZW50c1JldHVyblJlc3VsdHMpIHtcbiAgICAgIG1lc3NhZ2VQcm92aWRlciA9IHBsdWdpbk1hbmFnZXIucmVzdWx0c0RCLnJlZ2lzdGVyUHJvdmlkZXIoXG4gICAgICAgIE9iamVjdC5rZXlzKG1lc3NhZ2VUeXBlcyksXG4gICAgICApXG4gICAgfVxuICAgIGZvciAoY29uc3QgdHlwZSBvZiBPYmplY3Qua2V5cyhtZXNzYWdlVHlwZXMpKSB7XG4gICAgICBjb25zdCBvcHRzID0gbWVzc2FnZVR5cGVzW3R5cGVdXG4gICAgICBoYW5kbGVQcm9taXNlKHBsdWdpbk1hbmFnZXIub3V0cHV0UGFuZWwuY3JlYXRlVGFiKHR5cGUsIG9wdHMpKVxuICAgICAgZGlzcC5hZGQoXG4gICAgICAgIG5ldyBEaXNwb3NhYmxlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGhhbmRsZVByb21pc2UocGx1Z2luTWFuYWdlci5vdXRwdXRQYW5lbC5yZW1vdmVUYWIodHlwZSkpXG4gICAgICAgIH0pLFxuICAgICAgKVxuICAgIH1cbiAgfVxuICBpZiAoZXZlbnRzKSB7XG4gICAgaWYgKGV2ZW50cy5vbldpbGxTYXZlQnVmZmVyKSB7XG4gICAgICBkaXNwLmFkZChcbiAgICAgICAgcmVnaXN0ZXJFdmVudChcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIHBsdWdpbk1hbmFnZXIsXG4gICAgICAgICAgbWVzc2FnZVByb3ZpZGVyLFxuICAgICAgICAgIGV2ZW50cy5vbldpbGxTYXZlQnVmZmVyLFxuICAgICAgICAgIHBsdWdpbk1hbmFnZXIub25XaWxsU2F2ZUJ1ZmZlcixcbiAgICAgICAgKSxcbiAgICAgIClcbiAgICB9XG4gICAgaWYgKGV2ZW50cy5vbkRpZFNhdmVCdWZmZXIpIHtcbiAgICAgIGRpc3AuYWRkKFxuICAgICAgICByZWdpc3RlckV2ZW50KFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgcGx1Z2luTWFuYWdlcixcbiAgICAgICAgICBtZXNzYWdlUHJvdmlkZXIsXG4gICAgICAgICAgZXZlbnRzLm9uRGlkU2F2ZUJ1ZmZlcixcbiAgICAgICAgICBwbHVnaW5NYW5hZ2VyLm9uRGlkU2F2ZUJ1ZmZlcixcbiAgICAgICAgKSxcbiAgICAgIClcbiAgICB9XG4gICAgaWYgKGV2ZW50cy5vbkRpZFN0b3BDaGFuZ2luZykge1xuICAgICAgZGlzcC5hZGQoXG4gICAgICAgIHJlZ2lzdGVyRXZlbnQoXG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICBwbHVnaW5NYW5hZ2VyLFxuICAgICAgICAgIG1lc3NhZ2VQcm92aWRlcixcbiAgICAgICAgICBldmVudHMub25EaWRTdG9wQ2hhbmdpbmcsXG4gICAgICAgICAgcGx1Z2luTWFuYWdlci5vbkRpZFN0b3BDaGFuZ2luZyxcbiAgICAgICAgKSxcbiAgICAgIClcbiAgICB9XG4gIH1cbiAgaWYgKHRvb2x0aXApIHtcbiAgICBsZXQgaGFuZGxlcjogVVBJLlRUb29sdGlwSGFuZGxlclxuICAgIGxldCBwcmlvcml0eTogbnVtYmVyIHwgdW5kZWZpbmVkXG4gICAgbGV0IGV2ZW50VHlwZXM6IFRFdmVudFJhbmdlVHlwZVtdIHwgdW5kZWZpbmVkXG4gICAgaWYgKHR5cGVvZiB0b29sdGlwID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBoYW5kbGVyID0gdG9vbHRpcFxuICAgIH0gZWxzZSB7XG4gICAgICA7KHsgaGFuZGxlciwgcHJpb3JpdHksIGV2ZW50VHlwZXMgfSA9IHRvb2x0aXApXG4gICAgfVxuICAgIGlmIChwcmlvcml0eSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBwcmlvcml0eSA9IDEwMFxuICAgIH1cbiAgICBkaXNwLmFkZChcbiAgICAgIHBsdWdpbk1hbmFnZXIudG9vbHRpcFJlZ2lzdHJ5LnJlZ2lzdGVyKG5hbWUsIHtcbiAgICAgICAgcHJpb3JpdHksXG4gICAgICAgIGhhbmRsZXIsXG4gICAgICAgIGV2ZW50VHlwZXMsXG4gICAgICB9KSxcbiAgICApXG4gIH1cbiAgaWYgKGNvbnRyb2xzKSB7XG4gICAgZm9yIChjb25zdCBpIG9mIGNvbnRyb2xzKSB7XG4gICAgICBkaXNwLmFkZChwbHVnaW5NYW5hZ2VyLm91dHB1dFBhbmVsLmFkZFBhbmVsQ29udHJvbChpKSlcbiAgICB9XG4gIH1cbiAgaWYgKHBhcmFtcykge1xuICAgIGZvciAoY29uc3QgcGFyYW1OYW1lIG9mIE9iamVjdC5rZXlzKHBhcmFtcykpIHtcbiAgICAgIGNvbnN0IHNwZWMgPSBwYXJhbXNbcGFyYW1OYW1lXVxuICAgICAgZGlzcC5hZGQocGx1Z2luTWFuYWdlci5jb25maWdQYXJhbU1hbmFnZXIuYWRkKG5hbWUsIHBhcmFtTmFtZSwgc3BlYykpXG4gICAgfVxuICB9XG4gIGlmIChmZWF0dXJlU2V0LnN1cHBvcnRzQ29tbWFuZHMgJiYgY29tbWFuZHMpIHtcbiAgICBmb3IgKGNvbnN0IFt0YXJnZXQsIGNtZHNdIG9mIE9iamVjdC5lbnRyaWVzKGNvbW1hbmRzKSkge1xuICAgICAgaWYgKGNtZHMgPT09IHVuZGVmaW5lZCkgY29udGludWVcbiAgICAgIGZvciAoY29uc3QgW2NtZCwgaGFuZGxlcl0gb2YgT2JqZWN0LmVudHJpZXMoY21kcykpIHtcbiAgICAgICAgZGlzcC5hZGQoXG4gICAgICAgICAgYXRvbS5jb21tYW5kcy5hZGQodGFyZ2V0LCBjbWQsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB3cmFwU3RhdHVzKFxuICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICBwbHVnaW5NYW5hZ2VyLFxuICAgICAgICAgICAgICBtZXNzYWdlUHJvdmlkZXIsXG4gICAgICAgICAgICAgIGhhbmRsZXIsXG4gICAgICAgICAgICApKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmNhdGNoKGZ1bmN0aW9uKGU6IEVycm9yKSB7XG4gICAgICAgICAgICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRFcnJvcihlLnRvU3RyaW5nKCksIHtcbiAgICAgICAgICAgICAgICBkZXRhaWw6IGUubWVzc2FnZSxcbiAgICAgICAgICAgICAgICBkaXNtaXNzYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSksXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGlzcFxufVxuXG5mdW5jdGlvbiByZWdpc3RlckV2ZW50KFxuICBuYW1lOiBzdHJpbmcsXG4gIG1hbmFnZXI6IFBsdWdpbk1hbmFnZXIsXG4gIHByb3ZpZGVyOiBQcm92aWRlciB8IHVuZGVmaW5lZCxcbiAgY2I6IFVQSS5UU2luZ2xlT3JBcnJheTxVUEkuVFRleHRCdWZmZXJDYWxsYmFjaz4sXG4gIHJlZzogKGNiOiBVUEkuVFRleHRCdWZmZXJDYWxsYmFjaykgPT4gRGlzcG9zYWJsZSxcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShjYikpIHtcbiAgICBjb25zdCBkaXNwID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICAgIGZvciAoY29uc3QgaSBvZiBjYikge1xuICAgICAgZGlzcC5hZGQocmVnKHdyYXBTdGF0dXMobmFtZSwgbWFuYWdlciwgcHJvdmlkZXIsIGkpKSlcbiAgICB9XG4gICAgcmV0dXJuIGRpc3BcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVnKHdyYXBTdGF0dXMobmFtZSwgbWFuYWdlciwgcHJvdmlkZXIsIGNiKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB3cmFwU3RhdHVzPEFyZ3MgZXh0ZW5kcyBBcnJheTx1bmtub3duPiwgUj4oXG4gIG5hbWU6IHN0cmluZyxcbiAgbWFuYWdlcjogUGx1Z2luTWFuYWdlcixcbiAgcHJvdmlkZXI6IFByb3ZpZGVyIHwgdW5kZWZpbmVkLFxuICBjYjogKC4uLmFyZ3M6IEFyZ3MpID0+IFIsXG4pIHtcbiAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uKC4uLmFyZ3M6IEFyZ3MpIHtcbiAgICB0cnkge1xuICAgICAgbWFuYWdlci5iYWNrZW5kU3RhdHVzKG5hbWUsIHsgc3RhdHVzOiAncHJvZ3Jlc3MnLCBkZXRhaWw6ICcnIH0pXG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBQcm9taXNlLnJlc29sdmUoY2IoLi4uYXJncykpXG4gICAgICBpZiAocHJvdmlkZXIgJiYgQXJyYXkuaXNBcnJheShyZXMpKSBwcm92aWRlci5zZXRNZXNzYWdlcyhyZXMpXG4gICAgICBtYW5hZ2VyLmJhY2tlbmRTdGF0dXMobmFtZSwgeyBzdGF0dXM6ICdyZWFkeScsIGRldGFpbDogJycgfSlcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBtYW5hZ2VyLmJhY2tlbmRTdGF0dXMobmFtZSwgeyBzdGF0dXM6ICd3YXJuaW5nJywgZGV0YWlsOiBgJHtlfWAgfSlcbiAgICAgIGNvbnNvbGUud2FybihlKVxuICAgIH1cbiAgfVxufVxuIl19