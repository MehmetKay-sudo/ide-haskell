"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const result_item_1 = require("./result-item");
exports.ResultItem = result_item_1.ResultItem;
const atom_1 = require("atom");
const provider_1 = require("./provider");
const utils_1 = require("../utils");
class ResultsDB {
    constructor() {
        this.currentId = 0;
        this.disposables = new atom_1.CompositeDisposable();
        this.emitter = new atom_1.Emitter();
        this.disposables.add(this.emitter);
        this.messages = new Map();
    }
    destroy() {
        this.disposables.dispose();
    }
    onDidUpdate(callback) {
        return this.emitter.on('did-update', callback);
    }
    didUpdate(providerId, providerSeverities, msgs) {
        const uris = msgs.map((v) => v.uri).filter(utils_1.notUndefined);
        for (const [k, v] of Array.from(this.messages)) {
            if (v.providerId === providerId ||
                (v.uri !== undefined &&
                    uris.includes(v.uri) &&
                    providerSeverities.includes(v.severity))) {
                this.messages.delete(k);
            }
        }
        for (const msg of msgs) {
            this.messages.set(msg.hash(), msg);
        }
        const severities = new Set(msgs.map((v) => v.severity));
        this.emitter.emit('did-update', Array.from(severities));
    }
    registerProvider(providerSeverities) {
        const p = new provider_1.Provider(this, new Set(providerSeverities), ++this.currentId);
        this.disposables.add(p);
        return p;
    }
    results() {
        return this.messages.values();
    }
    *filter(f) {
        for (const v of this.results()) {
            if (f(v)) {
                yield v;
            }
        }
    }
    isEmpty(severities) {
        return !Array.from(this.messages.values()).some(({ severity }) => severities.includes(severity));
    }
}
exports.ResultsDB = ResultsDB;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmVzdWx0cy1kYi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUEwQztBQU1QLHFCQU4xQix3QkFBVSxDQU0wQjtBQUw3QywrQkFBbUQ7QUFDbkQseUNBQStEO0FBQy9ELG9DQUF1QztBQU92QyxNQUFhLFNBQVM7SUFVcEI7UUFDRSxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQTtRQUNsQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtRQUM1QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksY0FBTyxFQUFFLENBQUE7UUFDNUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ2xDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTtJQUMzQixDQUFDO0lBRU0sT0FBTztRQUNaLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDNUIsQ0FBQztJQUVNLFdBQVcsQ0FBQyxRQUF5QjtRQUMxQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNoRCxDQUFDO0lBRU0sU0FBUyxDQUNkLFVBQWtCLEVBQ2xCLGtCQUFtQyxFQUNuQyxJQUFrQjtRQUVsQixNQUFNLElBQUksR0FBYSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLG9CQUFZLENBQUMsQ0FBQTtRQUNsRSxLQUFLLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDOUMsSUFDRSxDQUFDLENBQUMsVUFBVSxLQUFLLFVBQVU7Z0JBQzNCLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxTQUFTO29CQUNsQixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7b0JBQ3BCLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFDMUM7Z0JBQ0EsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7YUFDeEI7U0FDRjtRQUNELEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQTtTQUNuQztRQUNELE1BQU0sVUFBVSxHQUF1QixJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtRQUMzRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFBO0lBQ3pELENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxrQkFBbUM7UUFDekQsTUFBTSxDQUFDLEdBQUcsSUFBSSxtQkFBUSxDQUFDLElBQUksRUFBRSxJQUFJLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQzNFLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3ZCLE9BQU8sQ0FBQyxDQUFBO0lBQ1YsQ0FBQztJQUVNLE9BQU87UUFDWixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUE7SUFDL0IsQ0FBQztJQUVNLENBQUMsTUFBTSxDQUFDLENBQWdDO1FBQzdDLEtBQUssTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQzlCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNSLE1BQU0sQ0FBQyxDQUFBO2FBQ1I7U0FDRjtJQUNILENBQUM7SUFFTSxPQUFPLENBQUMsVUFBMkI7UUFDeEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUMvRCxVQUFVLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUM5QixDQUFBO0lBQ0gsQ0FBQztDQUNGO0FBeEVELDhCQXdFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlc3VsdEl0ZW0gfSBmcm9tICcuL3Jlc3VsdC1pdGVtJ1xuaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSwgRW1pdHRlciB9IGZyb20gJ2F0b20nXG5pbXBvcnQgeyBQcm92aWRlciwgVE1lc3NhZ2VQcm92aWRlckZ1bmN0aW9uIH0gZnJvbSAnLi9wcm92aWRlcidcbmltcG9ydCB7IG5vdFVuZGVmaW5lZCB9IGZyb20gJy4uL3V0aWxzJ1xuaW1wb3J0ICogYXMgVVBJIGZyb20gJ2F0b20taGFza2VsbC11cGknXG5cbmV4cG9ydCB7IFRNZXNzYWdlUHJvdmlkZXJGdW5jdGlvbiwgUmVzdWx0SXRlbSB9XG5cbmV4cG9ydCB0eXBlIFRVcGRhdGVDYWxsYmFjayA9IChzZXZlcml0aWVzOiBVUEkuVFNldmVyaXR5W10pID0+IHZvaWRcblxuZXhwb3J0IGNsYXNzIFJlc3VsdHNEQiB7XG4gIHByaXZhdGUgY3VycmVudElkOiBudW1iZXJcbiAgcHJpdmF0ZSBtZXNzYWdlczogTWFwPHN0cmluZywgUmVzdWx0SXRlbT5cbiAgcHJpdmF0ZSBkaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZVxuICBwcml2YXRlIGVtaXR0ZXI6IEVtaXR0ZXI8XG4gICAge30sXG4gICAge1xuICAgICAgJ2RpZC11cGRhdGUnOiBVUEkuVFNldmVyaXR5W11cbiAgICB9XG4gID5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jdXJyZW50SWQgPSAwXG4gICAgdGhpcy5kaXNwb3NhYmxlcyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgICB0aGlzLmVtaXR0ZXIgPSBuZXcgRW1pdHRlcigpXG4gICAgdGhpcy5kaXNwb3NhYmxlcy5hZGQodGhpcy5lbWl0dGVyKVxuICAgIHRoaXMubWVzc2FnZXMgPSBuZXcgTWFwKClcbiAgfVxuXG4gIHB1YmxpYyBkZXN0cm95KCkge1xuICAgIHRoaXMuZGlzcG9zYWJsZXMuZGlzcG9zZSgpXG4gIH1cblxuICBwdWJsaWMgb25EaWRVcGRhdGUoY2FsbGJhY2s6IFRVcGRhdGVDYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24oJ2RpZC11cGRhdGUnLCBjYWxsYmFjaylcbiAgfVxuXG4gIHB1YmxpYyBkaWRVcGRhdGUoXG4gICAgcHJvdmlkZXJJZDogbnVtYmVyLFxuICAgIHByb3ZpZGVyU2V2ZXJpdGllczogVVBJLlRTZXZlcml0eVtdLFxuICAgIG1zZ3M6IFJlc3VsdEl0ZW1bXSxcbiAgKSB7XG4gICAgY29uc3QgdXJpczogc3RyaW5nW10gPSBtc2dzLm1hcCgodikgPT4gdi51cmkpLmZpbHRlcihub3RVbmRlZmluZWQpXG4gICAgZm9yIChjb25zdCBbaywgdl0gb2YgQXJyYXkuZnJvbSh0aGlzLm1lc3NhZ2VzKSkge1xuICAgICAgaWYgKFxuICAgICAgICB2LnByb3ZpZGVySWQgPT09IHByb3ZpZGVySWQgfHxcbiAgICAgICAgKHYudXJpICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICB1cmlzLmluY2x1ZGVzKHYudXJpKSAmJlxuICAgICAgICAgIHByb3ZpZGVyU2V2ZXJpdGllcy5pbmNsdWRlcyh2LnNldmVyaXR5KSlcbiAgICAgICkge1xuICAgICAgICB0aGlzLm1lc3NhZ2VzLmRlbGV0ZShrKVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IG1zZyBvZiBtc2dzKSB7XG4gICAgICB0aGlzLm1lc3NhZ2VzLnNldChtc2cuaGFzaCgpLCBtc2cpXG4gICAgfVxuICAgIGNvbnN0IHNldmVyaXRpZXM6IFNldDxVUEkuVFNldmVyaXR5PiA9IG5ldyBTZXQobXNncy5tYXAoKHYpID0+IHYuc2V2ZXJpdHkpKVxuICAgIHRoaXMuZW1pdHRlci5lbWl0KCdkaWQtdXBkYXRlJywgQXJyYXkuZnJvbShzZXZlcml0aWVzKSlcbiAgfVxuXG4gIHB1YmxpYyByZWdpc3RlclByb3ZpZGVyKHByb3ZpZGVyU2V2ZXJpdGllczogVVBJLlRTZXZlcml0eVtdKSB7XG4gICAgY29uc3QgcCA9IG5ldyBQcm92aWRlcih0aGlzLCBuZXcgU2V0KHByb3ZpZGVyU2V2ZXJpdGllcyksICsrdGhpcy5jdXJyZW50SWQpXG4gICAgdGhpcy5kaXNwb3NhYmxlcy5hZGQocClcbiAgICByZXR1cm4gcFxuICB9XG5cbiAgcHVibGljIHJlc3VsdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZXMudmFsdWVzKClcbiAgfVxuXG4gIHB1YmxpYyAqZmlsdGVyKGY6IChpdGVtOiBSZXN1bHRJdGVtKSA9PiBib29sZWFuKSB7XG4gICAgZm9yIChjb25zdCB2IG9mIHRoaXMucmVzdWx0cygpKSB7XG4gICAgICBpZiAoZih2KSkge1xuICAgICAgICB5aWVsZCB2XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGlzRW1wdHkoc2V2ZXJpdGllczogVVBJLlRTZXZlcml0eVtdKSB7XG4gICAgcmV0dXJuICFBcnJheS5mcm9tKHRoaXMubWVzc2FnZXMudmFsdWVzKCkpLnNvbWUoKHsgc2V2ZXJpdHkgfSkgPT5cbiAgICAgIHNldmVyaXRpZXMuaW5jbHVkZXMoc2V2ZXJpdHkpLFxuICAgIClcbiAgfVxufVxuIl19