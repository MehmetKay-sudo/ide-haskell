"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
class EventTable {
    constructor(editor, groups) {
        this.editor = editor;
        this.table = Object.create(null);
        for (const i of utils_1.eventRangeTypeVals) {
            this.table[i] = new Map();
        }
        this.layers = new Set();
        for (const i of groups) {
            const layer = this.editor.addMarkerLayer();
            this.layers.add(layer);
            for (const { type, source } of i) {
                ;
                this.table[type].set(source, layer);
            }
        }
    }
    destroy() {
        for (const i of this.layers.values()) {
            i.destroy();
        }
        for (const i of this.values()) {
            i.clear();
        }
    }
    get(type, source) {
        const tbl = this.table[type];
        let res = tbl.get(source);
        if (!res) {
            res = tbl.get(undefined);
        }
        if (!res) {
            throw new Error(`Failed to classify ${type}:${source}`);
        }
        return res;
    }
    clear() {
        for (const i of this.layers.values()) {
            i.clear();
        }
    }
    getMarkerCount() {
        let count = 0;
        for (const i of this.layers.values()) {
            count += i.getMarkerCount();
        }
        return count;
    }
    *values() {
        for (const i of utils_1.eventRangeTypeVals) {
            yield this.table[i];
        }
    }
    *entries() {
        for (const i of utils_1.eventRangeTypeVals) {
            yield [i, this.table[i]];
        }
    }
}
exports.EventTable = EventTable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtdGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZWRpdG9yLWNvbnRyb2wvZXZlbnQtdGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxvQ0FBNkM7QUFVN0MsTUFBYSxVQUFVO0lBR3JCLFlBQW9CLE1BQWtCLEVBQUUsTUFBc0I7UUFBMUMsV0FBTSxHQUFOLE1BQU0sQ0FBWTtRQUVwQyxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDaEMsS0FBSyxNQUFNLENBQUMsSUFBSSwwQkFBa0IsRUFBRTtZQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7U0FDMUI7UUFDRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7UUFDdkIsS0FBSyxNQUFNLENBQUMsSUFBSSxNQUFNLEVBQUU7WUFDdEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQTtZQUMxQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQTtZQUN0QixLQUFLLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFO2dCQUNoQyxDQUFDO2dCQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFnQixDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUE7YUFDckQ7U0FDRjtJQUNILENBQUM7SUFFTSxPQUFPO1FBQ1osS0FBSyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ3BDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtTQUNaO1FBQ0QsS0FBSyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDN0IsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBO1NBQ1Y7SUFDSCxDQUFDO0lBRU0sR0FBRyxDQUFDLElBQXFCLEVBQUUsTUFBZTtRQUMvQyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBZ0QsQ0FBQTtRQUMzRSxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3pCLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDUixHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQTtTQUN6QjtRQUNELElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDUixNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixJQUFJLElBQUksTUFBTSxFQUFFLENBQUMsQ0FBQTtTQUN4RDtRQUNELE9BQU8sR0FBRyxDQUFBO0lBQ1osQ0FBQztJQUVNLEtBQUs7UUFDVixLQUFLLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDcEMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBO1NBQ1Y7SUFDSCxDQUFDO0lBRU0sY0FBYztRQUNuQixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUE7UUFDYixLQUFLLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDcEMsS0FBSyxJQUFJLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQTtTQUM1QjtRQUNELE9BQU8sS0FBSyxDQUFBO0lBQ2QsQ0FBQztJQUVNLENBQUMsTUFBTTtRQUNaLEtBQUssTUFBTSxDQUFDLElBQUksMEJBQWtCLEVBQUU7WUFDbEMsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBZSxDQUFBO1NBQ2xDO0lBQ0gsQ0FBQztJQUVNLENBQUMsT0FBTztRQUNiLEtBQUssTUFBTSxDQUFDLElBQUksMEJBQWtCLEVBQUU7WUFDbEMsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDekI7SUFDSCxDQUFDO0NBQ0Y7QUFqRUQsZ0NBaUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGV4dEVkaXRvciwgRGlzcGxheU1hcmtlckxheWVyIH0gZnJvbSAnYXRvbSdcbmltcG9ydCB7IGV2ZW50UmFuZ2VUeXBlVmFscyB9IGZyb20gJy4uL3V0aWxzJ1xuaW1wb3J0ICogYXMgVVBJIGZyb20gJ2F0b20taGFza2VsbC11cGknXG5pbXBvcnQgVEV2ZW50UmFuZ2VUeXBlID0gVVBJLlRFdmVudFJhbmdlVHlwZVxuXG5leHBvcnQgdHlwZSBJTWFya2VyR3JvdXAgPSBBcnJheTx7IHR5cGU6IFRFdmVudFJhbmdlVHlwZTsgc291cmNlPzogc3RyaW5nIH0+XG5cbmV4cG9ydCB0eXBlIFRUYWJsZUNlbGwgPSBNYXA8c3RyaW5nIHwgdW5kZWZpbmVkLCBEaXNwbGF5TWFya2VyTGF5ZXI+XG5cbmV4cG9ydCB0eXBlIFRUYWJsZSA9IHsgW0sgaW4gVEV2ZW50UmFuZ2VUeXBlXTogVFRhYmxlQ2VsbCB9XG5cbmV4cG9ydCBjbGFzcyBFdmVudFRhYmxlIHtcbiAgcHJpdmF0ZSB0YWJsZTogVFRhYmxlXG4gIHByaXZhdGUgbGF5ZXJzOiBTZXQ8RGlzcGxheU1hcmtlckxheWVyPlxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVkaXRvcjogVGV4dEVkaXRvciwgZ3JvdXBzOiBJTWFya2VyR3JvdXBbXSkge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1udWxsLWtleXdvcmRcbiAgICB0aGlzLnRhYmxlID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuICAgIGZvciAoY29uc3QgaSBvZiBldmVudFJhbmdlVHlwZVZhbHMpIHtcbiAgICAgIHRoaXMudGFibGVbaV0gPSBuZXcgTWFwKClcbiAgICB9XG4gICAgdGhpcy5sYXllcnMgPSBuZXcgU2V0KClcbiAgICBmb3IgKGNvbnN0IGkgb2YgZ3JvdXBzKSB7XG4gICAgICBjb25zdCBsYXllciA9IHRoaXMuZWRpdG9yLmFkZE1hcmtlckxheWVyKClcbiAgICAgIHRoaXMubGF5ZXJzLmFkZChsYXllcilcbiAgICAgIGZvciAoY29uc3QgeyB0eXBlLCBzb3VyY2UgfSBvZiBpKSB7XG4gICAgICAgIDsodGhpcy50YWJsZVt0eXBlXSBhcyBUVGFibGVDZWxsKS5zZXQoc291cmNlLCBsYXllcilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSgpIHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5sYXllcnMudmFsdWVzKCkpIHtcbiAgICAgIGkuZGVzdHJveSgpXG4gICAgfVxuICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLnZhbHVlcygpKSB7XG4gICAgICBpLmNsZWFyKClcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0KHR5cGU6IFRFdmVudFJhbmdlVHlwZSwgc291cmNlPzogc3RyaW5nKSB7XG4gICAgY29uc3QgdGJsID0gdGhpcy50YWJsZVt0eXBlXSBhcyBNYXA8c3RyaW5nIHwgdW5kZWZpbmVkLCBEaXNwbGF5TWFya2VyTGF5ZXI+XG4gICAgbGV0IHJlcyA9IHRibC5nZXQoc291cmNlKVxuICAgIGlmICghcmVzKSB7XG4gICAgICByZXMgPSB0YmwuZ2V0KHVuZGVmaW5lZClcbiAgICB9XG4gICAgaWYgKCFyZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGNsYXNzaWZ5ICR7dHlwZX06JHtzb3VyY2V9YClcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG5cbiAgcHVibGljIGNsZWFyKCkge1xuICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLmxheWVycy52YWx1ZXMoKSkge1xuICAgICAgaS5jbGVhcigpXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldE1hcmtlckNvdW50KCkge1xuICAgIGxldCBjb3VudCA9IDBcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5sYXllcnMudmFsdWVzKCkpIHtcbiAgICAgIGNvdW50ICs9IGkuZ2V0TWFya2VyQ291bnQoKVxuICAgIH1cbiAgICByZXR1cm4gY291bnRcbiAgfVxuXG4gIHB1YmxpYyAqdmFsdWVzKCkge1xuICAgIGZvciAoY29uc3QgaSBvZiBldmVudFJhbmdlVHlwZVZhbHMpIHtcbiAgICAgIHlpZWxkIHRoaXMudGFibGVbaV0gYXMgVFRhYmxlQ2VsbFxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyAqZW50cmllcygpIHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgZXZlbnRSYW5nZVR5cGVWYWxzKSB7XG4gICAgICB5aWVsZCBbaSwgdGhpcy50YWJsZVtpXV1cbiAgICB9XG4gIH1cbn1cbiJdfQ==