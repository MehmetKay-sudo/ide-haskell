"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tooltip_view_1 = require("./tooltip-view");
const event_table_1 = require("./event-table");
class TooltipManager {
    constructor(editor) {
        this.editor = editor;
        this.markers = new event_table_1.EventTable(editor, [
            [{ type: "keyboard" }, { type: "context" }],
            [{ type: "mouse" }, { type: "selection" }],
        ]);
        this.editorElement = atom.views.getView(this.editor);
    }
    dispose() {
        this.markers.destroy();
        this.editorElement.classList.remove('ide-haskell--has-tooltips');
    }
    show(range, text, type, source, detail) {
        this.hide(type, source);
        const highlightMarker = this.markers
            .get(type, source)
            .markBufferRange(range);
        highlightMarker.setProperties(detail);
        this.decorate(highlightMarker, new tooltip_view_1.TooltipMessage(text));
        this.editorElement.classList.add('ide-haskell--has-tooltips');
    }
    hide(type, source, template) {
        if (type === undefined) {
            this.markers.clear();
            return;
        }
        if (!template) {
            this.markers.get(type, source).clear();
        }
        else {
            this.markers
                .get(type, source)
                .findMarkers(template)
                .forEach((m) => m.destroy());
        }
        if (!this.has()) {
            this.editorElement.classList.remove('ide-haskell--has-tooltips');
        }
    }
    has(type, source, template) {
        if (type === undefined) {
            return this.markers.getMarkerCount() > 0;
        }
        if (!template) {
            return this.markers.get(type, source).getMarkerCount() > 0;
        }
        else {
            return this.markers.get(type, source).findMarkers(template).length > 0;
        }
    }
    decorate(marker, tooltipView) {
        this.editor.decorateMarker(marker, {
            type: 'overlay',
            position: 'tail',
            item: tooltipView,
        });
        this.editor.decorateMarker(marker, {
            type: 'highlight',
            class: 'ide-haskell-type',
        });
    }
}
exports.TooltipManager = TooltipManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VkaXRvci1jb250cm9sL3Rvb2x0aXAtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUErQztBQUMvQywrQ0FBMEM7QUFhMUMsTUFBYSxjQUFjO0lBR3pCLFlBQW9CLE1BQWtCO1FBQWxCLFdBQU0sR0FBTixNQUFNLENBQVk7UUFDcEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLHdCQUFVLENBQUMsTUFBTSxFQUFFO1lBQ3BDLENBQUMsRUFBRSxJQUFJLFlBQTBCLEVBQUUsRUFBRSxFQUFFLElBQUksV0FBeUIsRUFBRSxDQUFDO1lBQ3ZFLENBQUMsRUFBRSxJQUFJLFNBQXVCLEVBQUUsRUFBRSxFQUFFLElBQUksYUFBMkIsRUFBRSxDQUFDO1NBQ3ZFLENBQUMsQ0FBQTtRQUNGLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3RELENBQUM7SUFFTSxPQUFPO1FBQ1osSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUN0QixJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsMkJBQTJCLENBQUMsQ0FBQTtJQUNsRSxDQUFDO0lBRU0sSUFBSSxDQUNULEtBQVksRUFDWixJQUFxQyxFQUNyQyxJQUFxQixFQUNyQixNQUFjLEVBQ2QsTUFBeUI7UUFFekIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDdkIsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU87YUFDakMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUM7YUFDakIsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ3pCLGVBQWUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDckMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsSUFBSSw2QkFBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7UUFDeEQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLDJCQUEyQixDQUFDLENBQUE7SUFDL0QsQ0FBQztJQUVNLElBQUksQ0FDVCxJQUFzQixFQUN0QixNQUFlLEVBQ2YsUUFBNEI7UUFFNUIsSUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFO1lBQ3RCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUE7WUFDcEIsT0FBTTtTQUNQO1FBQ0QsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNiLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtTQUN2QzthQUFNO1lBQ0wsSUFBSSxDQUFDLE9BQU87aUJBQ1QsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUM7aUJBQ2pCLFdBQVcsQ0FBQyxRQUFRLENBQUM7aUJBQ3JCLE9BQU8sQ0FBQyxDQUFDLENBQWdCLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFBO1NBQzlDO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUNmLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFBO1NBQ2pFO0lBQ0gsQ0FBQztJQUVNLEdBQUcsQ0FDUixJQUFzQixFQUN0QixNQUFlLEVBQ2YsUUFBNEI7UUFFNUIsSUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFO1lBQ3RCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsR0FBRyxDQUFDLENBQUE7U0FDekM7UUFDRCxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsY0FBYyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1NBQzNEO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQTtTQUN2RTtJQUNILENBQUM7SUFFTyxRQUFRLENBQUMsTUFBcUIsRUFBRSxXQUEyQjtRQUNqRSxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUU7WUFDakMsSUFBSSxFQUFFLFNBQVM7WUFDZixRQUFRLEVBQUUsTUFBTTtZQUNoQixJQUFJLEVBQUUsV0FBVztTQUNsQixDQUFDLENBQUE7UUFDRixJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUU7WUFDakMsSUFBSSxFQUFFLFdBQVc7WUFDakIsS0FBSyxFQUFFLGtCQUFrQjtTQUMxQixDQUFDLENBQUE7SUFDSixDQUFDO0NBQ0Y7QUFoRkQsd0NBZ0ZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVG9vbHRpcE1lc3NhZ2UgfSBmcm9tICcuL3Rvb2x0aXAtdmlldydcbmltcG9ydCB7IEV2ZW50VGFibGUgfSBmcm9tICcuL2V2ZW50LXRhYmxlJ1xuaW1wb3J0ICogYXMgQXRvbVR5cGVzIGZyb20gJ2F0b20nXG5pbXBvcnQgKiBhcyBVUEkgZnJvbSAnYXRvbS1oYXNrZWxsLXVwaSdcbmltcG9ydCBSYW5nZSA9IEF0b21UeXBlcy5SYW5nZVxuaW1wb3J0IFRleHRFZGl0b3IgPSBBdG9tVHlwZXMuVGV4dEVkaXRvclxuaW1wb3J0IERpc3BsYXlNYXJrZXIgPSBBdG9tVHlwZXMuRGlzcGxheU1hcmtlclxuaW1wb3J0IFRFdmVudFJhbmdlVHlwZSA9IFVQSS5URXZlbnRSYW5nZVR5cGVcbmltcG9ydCB7IE1lc3NhZ2VPYmplY3QgfSBmcm9tICcuLi91dGlscydcblxuZXhwb3J0IGludGVyZmFjZSBJTWFya2VyUHJvcGVydGllcyBleHRlbmRzIEF0b21UeXBlcy5GaW5kRGlzcGxheU1hcmtlck9wdGlvbnMge1xuICBwZXJzaXN0ZW50OiBib29sZWFuXG59XG5cbmV4cG9ydCBjbGFzcyBUb29sdGlwTWFuYWdlciB7XG4gIHByaXZhdGUgbWFya2VyczogRXZlbnRUYWJsZVxuICBwcml2YXRlIGVkaXRvckVsZW1lbnQ6IEhUTUxFbGVtZW50XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWRpdG9yOiBUZXh0RWRpdG9yKSB7XG4gICAgdGhpcy5tYXJrZXJzID0gbmV3IEV2ZW50VGFibGUoZWRpdG9yLCBbXG4gICAgICBbeyB0eXBlOiBURXZlbnRSYW5nZVR5cGUua2V5Ym9hcmQgfSwgeyB0eXBlOiBURXZlbnRSYW5nZVR5cGUuY29udGV4dCB9XSxcbiAgICAgIFt7IHR5cGU6IFRFdmVudFJhbmdlVHlwZS5tb3VzZSB9LCB7IHR5cGU6IFRFdmVudFJhbmdlVHlwZS5zZWxlY3Rpb24gfV0sXG4gICAgXSlcbiAgICB0aGlzLmVkaXRvckVsZW1lbnQgPSBhdG9tLnZpZXdzLmdldFZpZXcodGhpcy5lZGl0b3IpXG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZSgpIHtcbiAgICB0aGlzLm1hcmtlcnMuZGVzdHJveSgpXG4gICAgdGhpcy5lZGl0b3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lkZS1oYXNrZWxsLS1oYXMtdG9vbHRpcHMnKVxuICB9XG5cbiAgcHVibGljIHNob3coXG4gICAgcmFuZ2U6IFJhbmdlLFxuICAgIHRleHQ6IE1lc3NhZ2VPYmplY3QgfCBNZXNzYWdlT2JqZWN0W10sXG4gICAgdHlwZTogVEV2ZW50UmFuZ2VUeXBlLFxuICAgIHNvdXJjZTogc3RyaW5nLFxuICAgIGRldGFpbDogSU1hcmtlclByb3BlcnRpZXMsXG4gICkge1xuICAgIHRoaXMuaGlkZSh0eXBlLCBzb3VyY2UpXG4gICAgY29uc3QgaGlnaGxpZ2h0TWFya2VyID0gdGhpcy5tYXJrZXJzXG4gICAgICAuZ2V0KHR5cGUsIHNvdXJjZSlcbiAgICAgIC5tYXJrQnVmZmVyUmFuZ2UocmFuZ2UpXG4gICAgaGlnaGxpZ2h0TWFya2VyLnNldFByb3BlcnRpZXMoZGV0YWlsKVxuICAgIHRoaXMuZGVjb3JhdGUoaGlnaGxpZ2h0TWFya2VyLCBuZXcgVG9vbHRpcE1lc3NhZ2UodGV4dCkpXG4gICAgdGhpcy5lZGl0b3JFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lkZS1oYXNrZWxsLS1oYXMtdG9vbHRpcHMnKVxuICB9XG5cbiAgcHVibGljIGhpZGUoXG4gICAgdHlwZT86IFRFdmVudFJhbmdlVHlwZSxcbiAgICBzb3VyY2U/OiBzdHJpbmcsXG4gICAgdGVtcGxhdGU/OiBJTWFya2VyUHJvcGVydGllcyxcbiAgKSB7XG4gICAgaWYgKHR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5tYXJrZXJzLmNsZWFyKClcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAoIXRlbXBsYXRlKSB7XG4gICAgICB0aGlzLm1hcmtlcnMuZ2V0KHR5cGUsIHNvdXJjZSkuY2xlYXIoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1hcmtlcnNcbiAgICAgICAgLmdldCh0eXBlLCBzb3VyY2UpXG4gICAgICAgIC5maW5kTWFya2Vycyh0ZW1wbGF0ZSlcbiAgICAgICAgLmZvckVhY2goKG06IERpc3BsYXlNYXJrZXIpID0+IG0uZGVzdHJveSgpKVxuICAgIH1cbiAgICBpZiAoIXRoaXMuaGFzKCkpIHtcbiAgICAgIHRoaXMuZWRpdG9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpZGUtaGFza2VsbC0taGFzLXRvb2x0aXBzJylcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgaGFzKFxuICAgIHR5cGU/OiBURXZlbnRSYW5nZVR5cGUsXG4gICAgc291cmNlPzogc3RyaW5nLFxuICAgIHRlbXBsYXRlPzogSU1hcmtlclByb3BlcnRpZXMsXG4gICkge1xuICAgIGlmICh0eXBlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLm1hcmtlcnMuZ2V0TWFya2VyQ291bnQoKSA+IDBcbiAgICB9XG4gICAgaWYgKCF0ZW1wbGF0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMubWFya2Vycy5nZXQodHlwZSwgc291cmNlKS5nZXRNYXJrZXJDb3VudCgpID4gMFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXJrZXJzLmdldCh0eXBlLCBzb3VyY2UpLmZpbmRNYXJrZXJzKHRlbXBsYXRlKS5sZW5ndGggPiAwXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBkZWNvcmF0ZShtYXJrZXI6IERpc3BsYXlNYXJrZXIsIHRvb2x0aXBWaWV3OiBUb29sdGlwTWVzc2FnZSkge1xuICAgIHRoaXMuZWRpdG9yLmRlY29yYXRlTWFya2VyKG1hcmtlciwge1xuICAgICAgdHlwZTogJ292ZXJsYXknLFxuICAgICAgcG9zaXRpb246ICd0YWlsJyxcbiAgICAgIGl0ZW06IHRvb2x0aXBWaWV3LFxuICAgIH0pXG4gICAgdGhpcy5lZGl0b3IuZGVjb3JhdGVNYXJrZXIobWFya2VyLCB7XG4gICAgICB0eXBlOiAnaGlnaGxpZ2h0JyxcbiAgICAgIGNsYXNzOiAnaWRlLWhhc2tlbGwtdHlwZScsXG4gICAgfSlcbiAgfVxufVxuIl19