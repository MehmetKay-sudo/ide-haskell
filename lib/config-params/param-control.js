"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const etch = require("etch");
const utils_1 = require("../utils");
class ParamControl {
    constructor(props) {
        this.props = props;
        this.tooltipTitle = () => {
            const displayName = this.props.spec.displayName !== undefined
                ? this.props.spec.displayName
                : 'Undefined name';
            if (this.hiddenValue) {
                return `${displayName}: ${this.props.spec.displayTemplate(this.value)}`;
            }
            else {
                return displayName;
            }
        };
        this.disposables = new atom_1.CompositeDisposable();
        this.hiddenValue = atom.config.get('ide-haskell.hideParameterValues');
        this.initStore();
        this.initSpec();
        etch.initialize(this);
        this.disposables.add(atom.config.onDidChange('ide-haskell.hideParameterValues', ({ newValue }) => {
            this.hiddenValue = newValue;
            utils_1.handlePromise(this.update());
        }));
        this.disposables.add(atom.tooltips.add(this.element, { title: this.tooltipTitle }));
    }
    render() {
        const classList = [
            `ide-haskell--${this.props.pluginName}`,
            `ide-haskell-param--${this.props.name}`,
        ];
        if (this.hiddenValue) {
            classList.push('hidden-value');
        }
        return (etch.dom("ide-haskell-param", { class: classList.join(' '), on: { click: async () => this.setValue() } },
            etch.dom("ide-haskell-param-value", null, this.props.spec.displayTemplate(this.value))));
    }
    async update(props) {
        if (props) {
            const { pluginName, name, spec, store } = props;
            if (pluginName !== undefined) {
                this.props.pluginName = pluginName;
            }
            if (name !== undefined) {
                this.props.name = name;
            }
            if (spec && this.props.spec !== spec) {
                this.props.spec = spec;
                this.initSpec();
            }
            if (store && this.props.store !== store) {
                this.props.store = store;
                this.initStore();
            }
        }
        return etch.update(this);
    }
    async setValue(e) {
        await this.props.store.setValue(this.props.pluginName, this.props.name, e);
        utils_1.handlePromise(this.update());
    }
    async destroy() {
        await etch.destroy(this);
        this.disposables.dispose();
    }
    initStore() {
        if (this.storeDisposable) {
            this.disposables.remove(this.storeDisposable);
        }
        this.storeDisposable = this.props.store.onDidUpdate(this.props.pluginName, this.props.name, ({ value }) => {
            this.value = value;
            utils_1.handlePromise(this.update());
        });
        this.disposables.add(this.storeDisposable);
        utils_1.handlePromise(this.setValueInitial());
    }
    async setValueInitial() {
        this.value = await this.props.store.getValueRaw(this.props.pluginName, this.props.name);
        return this.update();
    }
    initSpec() {
        if (this.props.spec.displayName === undefined) {
            this.props.spec.displayName =
                this.props.name.charAt(0).toUpperCase() + this.props.name.slice(1);
        }
    }
}
exports.ParamControl = ParamControl;
//# sourceMappingURL=data:application/json;base64,