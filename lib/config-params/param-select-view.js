"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SelectListView = require("atom-select-list");
async function selectListView({ items, heading, itemTemplate, itemFilterKey, activeItem, }) {
    const elementForItem = (item) => {
        const li = document.createElement('li');
        const div = document.createElement('div');
        div.style.display = 'inline-block';
        let isActive;
        if (itemTemplate) {
            div.innerHTML = itemTemplate(item);
            isActive = activeItem && itemTemplate(item) === itemTemplate(activeItem);
        }
        else {
            div.innerText = `${item}`;
            isActive = activeItem && item === activeItem;
        }
        if (isActive)
            li.classList.add('active');
        if (div.firstElementChild && div.firstElementChild.tagName === 'LI') {
            div.innerHTML = div.firstElementChild.innerHTML;
        }
        li.appendChild(div);
        return li;
    };
    const filterKeyForItem = (item) => {
        if (typeof itemFilterKey === 'string') {
            return `${item[itemFilterKey]}`;
        }
        else if (itemFilterKey) {
            return itemFilterKey(item);
        }
        else {
            return `${item}`;
        }
    };
    const myitems = await Promise.resolve(items);
    let panel;
    try {
        return await new Promise((resolve) => {
            const select = new SelectListView({
                items: myitems,
                infoMessage: heading,
                itemsClassList: ['ide-haskell', 'mark-active'],
                elementForItem,
                filterKeyForItem,
                didCancelSelection: () => {
                    resolve();
                },
                didConfirmSelection: (item) => {
                    resolve(item);
                },
            });
            select.element.classList.add('ide-haskell');
            panel = atom.workspace.addModalPanel({
                item: select,
                visible: true,
            });
            select.focus();
        });
    }
    finally {
        if (panel)
            panel.destroy();
    }
}
exports.selectListView = selectListView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyYW0tc2VsZWN0LXZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlnLXBhcmFtcy9wYXJhbS1zZWxlY3Qtdmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1EQUFtRDtBQVc1QyxLQUFLLFVBQVUsY0FBYyxDQUFJLEVBQ3RDLEtBQUssRUFDTCxPQUFPLEVBQ1AsWUFBWSxFQUNaLGFBQWEsRUFDYixVQUFVLEdBQ1c7SUFDckIsTUFBTSxjQUFjLEdBQUcsQ0FBQyxJQUFPLEVBQUUsRUFBRTtRQUNqQyxNQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ3ZDLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDekMsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsY0FBYyxDQUFBO1FBQ2xDLElBQUksUUFBUSxDQUFBO1FBQ1osSUFBSSxZQUFZLEVBQUU7WUFDaEIsR0FBRyxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDbEMsUUFBUSxHQUFHLFVBQVUsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1NBQ3pFO2FBQU07WUFDTCxHQUFHLENBQUMsU0FBUyxHQUFHLEdBQUcsSUFBSSxFQUFFLENBQUE7WUFDekIsUUFBUSxHQUFHLFVBQVUsSUFBSSxJQUFJLEtBQUssVUFBVSxDQUFBO1NBQzdDO1FBQ0QsSUFBSSxRQUFRO1lBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUE7UUFFeEMsSUFBSSxHQUFHLENBQUMsaUJBQWlCLElBQUksR0FBRyxDQUFDLGlCQUFpQixDQUFDLE9BQU8sS0FBSyxJQUFJLEVBQUU7WUFDbkUsR0FBRyxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFBO1NBQ2hEO1FBQ0QsRUFBRSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNuQixPQUFPLEVBQUUsQ0FBQTtJQUNYLENBQUMsQ0FBQTtJQUNELE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxJQUFPLEVBQUUsRUFBRTtRQUNuQyxJQUFJLE9BQU8sYUFBYSxLQUFLLFFBQVEsRUFBRTtZQUNyQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUE7U0FDaEM7YUFBTSxJQUFJLGFBQWEsRUFBRTtZQUN4QixPQUFPLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUMzQjthQUFNO1lBQ0wsT0FBTyxHQUFHLElBQUksRUFBRSxDQUFBO1NBQ2pCO0lBQ0gsQ0FBQyxDQUFBO0lBQ0QsTUFBTSxPQUFPLEdBQUcsTUFBTSxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQzVDLElBQUksS0FBMkMsQ0FBQTtJQUMvQyxJQUFJO1FBQ0YsT0FBTyxNQUFNLElBQUksT0FBTyxDQUFnQixDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ2xELE1BQU0sTUFBTSxHQUFHLElBQUksY0FBYyxDQUFDO2dCQUNoQyxLQUFLLEVBQUUsT0FBTztnQkFDZCxXQUFXLEVBQUUsT0FBTztnQkFDcEIsY0FBYyxFQUFFLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQztnQkFDOUMsY0FBYztnQkFDZCxnQkFBZ0I7Z0JBQ2hCLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtvQkFDdkIsT0FBTyxFQUFFLENBQUE7Z0JBQ1gsQ0FBQztnQkFDRCxtQkFBbUIsRUFBRSxDQUFDLElBQU8sRUFBRSxFQUFFO29CQUMvQixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7Z0JBQ2YsQ0FBQzthQUNGLENBQUMsQ0FBQTtZQUNGLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQTtZQUMzQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUM7Z0JBQ25DLElBQUksRUFBRSxNQUFNO2dCQUNaLE9BQU8sRUFBRSxJQUFJO2FBQ2QsQ0FBQyxDQUFBO1lBQ0YsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ2hCLENBQUMsQ0FBQyxDQUFBO0tBQ0g7WUFBUztRQUNSLElBQUksS0FBSztZQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQTtLQUMzQjtBQUNILENBQUM7QUEvREQsd0NBK0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNlbGVjdExpc3RWaWV3ID0gcmVxdWlyZSgnYXRvbS1zZWxlY3QtbGlzdCcpXG5pbXBvcnQgeyBQYW5lbCB9IGZyb20gJ2F0b20nXG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNlbGVjdExpc3RQYXJhbXM8VD4ge1xuICBpdGVtczogVFtdIHwgUHJvbWlzZTxUW10+XG4gIGhlYWRpbmc/OiBzdHJpbmdcbiAgaXRlbVRlbXBsYXRlPzogKGl0ZW06IFQpID0+IHN0cmluZ1xuICBpdGVtRmlsdGVyS2V5Pzogc3RyaW5nIHwgKChpdGVtOiBUKSA9PiBzdHJpbmcpXG4gIGFjdGl2ZUl0ZW0/OiBUXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZWxlY3RMaXN0VmlldzxUPih7XG4gIGl0ZW1zLFxuICBoZWFkaW5nLFxuICBpdGVtVGVtcGxhdGUsXG4gIGl0ZW1GaWx0ZXJLZXksXG4gIGFjdGl2ZUl0ZW0sXG59OiBJU2VsZWN0TGlzdFBhcmFtczxUPik6IFByb21pc2U8VCB8IHVuZGVmaW5lZD4ge1xuICBjb25zdCBlbGVtZW50Rm9ySXRlbSA9IChpdGVtOiBUKSA9PiB7XG4gICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpXG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBkaXYuc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snXG4gICAgbGV0IGlzQWN0aXZlXG4gICAgaWYgKGl0ZW1UZW1wbGF0ZSkge1xuICAgICAgZGl2LmlubmVySFRNTCA9IGl0ZW1UZW1wbGF0ZShpdGVtKVxuICAgICAgaXNBY3RpdmUgPSBhY3RpdmVJdGVtICYmIGl0ZW1UZW1wbGF0ZShpdGVtKSA9PT0gaXRlbVRlbXBsYXRlKGFjdGl2ZUl0ZW0pXG4gICAgfSBlbHNlIHtcbiAgICAgIGRpdi5pbm5lclRleHQgPSBgJHtpdGVtfWBcbiAgICAgIGlzQWN0aXZlID0gYWN0aXZlSXRlbSAmJiBpdGVtID09PSBhY3RpdmVJdGVtXG4gICAgfVxuICAgIGlmIChpc0FjdGl2ZSkgbGkuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcbiAgICAvLyBoYWNrIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICAgIGlmIChkaXYuZmlyc3RFbGVtZW50Q2hpbGQgJiYgZGl2LmZpcnN0RWxlbWVudENoaWxkLnRhZ05hbWUgPT09ICdMSScpIHtcbiAgICAgIGRpdi5pbm5lckhUTUwgPSBkaXYuZmlyc3RFbGVtZW50Q2hpbGQuaW5uZXJIVE1MXG4gICAgfVxuICAgIGxpLmFwcGVuZENoaWxkKGRpdilcbiAgICByZXR1cm4gbGlcbiAgfVxuICBjb25zdCBmaWx0ZXJLZXlGb3JJdGVtID0gKGl0ZW06IFQpID0+IHtcbiAgICBpZiAodHlwZW9mIGl0ZW1GaWx0ZXJLZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gYCR7aXRlbVtpdGVtRmlsdGVyS2V5XX1gXG4gICAgfSBlbHNlIGlmIChpdGVtRmlsdGVyS2V5KSB7XG4gICAgICByZXR1cm4gaXRlbUZpbHRlcktleShpdGVtKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYCR7aXRlbX1gXG4gICAgfVxuICB9XG4gIGNvbnN0IG15aXRlbXMgPSBhd2FpdCBQcm9taXNlLnJlc29sdmUoaXRlbXMpXG4gIGxldCBwYW5lbDogUGFuZWw8U2VsZWN0TGlzdFZpZXc8VD4+IHwgdW5kZWZpbmVkXG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlPFQgfCB1bmRlZmluZWQ+KChyZXNvbHZlKSA9PiB7XG4gICAgICBjb25zdCBzZWxlY3QgPSBuZXcgU2VsZWN0TGlzdFZpZXcoe1xuICAgICAgICBpdGVtczogbXlpdGVtcyxcbiAgICAgICAgaW5mb01lc3NhZ2U6IGhlYWRpbmcsXG4gICAgICAgIGl0ZW1zQ2xhc3NMaXN0OiBbJ2lkZS1oYXNrZWxsJywgJ21hcmstYWN0aXZlJ10sXG4gICAgICAgIGVsZW1lbnRGb3JJdGVtLFxuICAgICAgICBmaWx0ZXJLZXlGb3JJdGVtLFxuICAgICAgICBkaWRDYW5jZWxTZWxlY3Rpb246ICgpID0+IHtcbiAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgfSxcbiAgICAgICAgZGlkQ29uZmlybVNlbGVjdGlvbjogKGl0ZW06IFQpID0+IHtcbiAgICAgICAgICByZXNvbHZlKGl0ZW0pXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICAgc2VsZWN0LmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaWRlLWhhc2tlbGwnKVxuICAgICAgcGFuZWwgPSBhdG9tLndvcmtzcGFjZS5hZGRNb2RhbFBhbmVsKHtcbiAgICAgICAgaXRlbTogc2VsZWN0LFxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxuICAgICAgfSlcbiAgICAgIHNlbGVjdC5mb2N1cygpXG4gICAgfSlcbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAocGFuZWwpIHBhbmVsLmRlc3Ryb3koKVxuICB9XG59XG4iXX0=