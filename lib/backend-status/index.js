"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const etch = require("etch");
const atom_1 = require("atom");
const status_icon_1 = require("./views/status-icon");
const progress_bar_1 = require("./views/progress-bar");
class BackendStatusController {
    constructor() {
        this.statusMap = new Map();
        this.awaiters = new Map();
        this.emitter = new atom_1.Emitter();
    }
    getAwaiter(pluginName) {
        let activeActionsVar = this.awaiters.get(pluginName);
        if (activeActionsVar === undefined) {
            activeActionsVar = new Set();
            this.awaiters.set(pluginName, activeActionsVar);
        }
        const activeActions = activeActionsVar;
        return async (action) => {
            let promise;
            try {
                promise = Promise.resolve().then(action);
                activeActions.add(promise);
                this.updateStatus(pluginName, { status: 'progress', detail: '' });
                const res = await promise;
                activeActions.delete(promise);
                if (activeActions.size === 0) {
                    this.updateStatus(pluginName, { status: 'ready', detail: '' });
                }
                return res;
            }
            catch (e) {
                if (promise)
                    activeActions.delete(promise);
                this.updateStatus(pluginName, { status: 'warning', detail: `${e}` });
                console.warn(e);
                return undefined;
            }
        };
    }
    forceBackendStatus(pluginName, status) {
        this.updateStatus(pluginName, status);
    }
    onDidUpdate(callback) {
        return this.emitter.on('did-update', callback);
    }
    renderStatusIcon() {
        return etch.dom(status_icon_1.StatusIcon, { statusMap: this.statusMap });
    }
    renderProgressBar() {
        const progress = Array.from(this.statusMap.values()).reduce((cv, i) => {
            if (i.status === 'progress' && i.progress !== undefined) {
                cv.push(i.progress);
            }
            return cv;
        }, []);
        return etch.dom(progress_bar_1.ProgressBar, { progress: progress });
    }
    updateStatus(pluginName, status) {
        this.statusMap.set(pluginName, status);
        this.emitter.emit('did-update', { pluginName, status });
    }
}
exports.BackendStatusController = BackendStatusController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYmFja2VuZC1zdGF0dXMvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkJBQTRCO0FBRTVCLCtCQUEwQztBQUMxQyxxREFBZ0Q7QUFDaEQsdURBQWtEO0FBRWxELE1BQWEsdUJBQXVCO0lBQXBDO1FBQ21CLGNBQVMsR0FBNkIsSUFBSSxHQUFHLEVBQUUsQ0FBQTtRQUMvQyxhQUFRLEdBQW1DLElBQUksR0FBRyxFQUFFLENBQUE7UUFDcEQsWUFBTyxHQUFHLElBQUksY0FBTyxFQUtuQyxDQUFBO0lBMERMLENBQUM7SUF4RFEsVUFBVSxDQUFDLFVBQWtCO1FBQ2xDLElBQUksZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDcEQsSUFBSSxnQkFBZ0IsS0FBSyxTQUFTLEVBQUU7WUFDbEMsZ0JBQWdCLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTtZQUM1QixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQTtTQUNoRDtRQUNELE1BQU0sYUFBYSxHQUFHLGdCQUFnQixDQUFBO1FBQ3RDLE9BQU8sS0FBSyxFQUFNLE1BQTRCLEVBQXFCLEVBQUU7WUFDbkUsSUFBSSxPQUFPLENBQUE7WUFDWCxJQUFJO2dCQUNGLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO2dCQUN4QyxhQUFhLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFBO2dCQUMxQixJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7Z0JBQ2pFLE1BQU0sR0FBRyxHQUFHLE1BQU0sT0FBTyxDQUFBO2dCQUN6QixhQUFhLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO2dCQUM3QixJQUFJLGFBQWEsQ0FBQyxJQUFJLEtBQUssQ0FBQyxFQUFFO29CQUM1QixJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7aUJBQy9EO2dCQUNELE9BQU8sR0FBRyxDQUFBO2FBQ1g7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixJQUFJLE9BQU87b0JBQUUsYUFBYSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtnQkFDMUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtnQkFDcEUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDZixPQUFPLFNBQVMsQ0FBQTthQUNqQjtRQUNILENBQUMsQ0FBQTtJQUNILENBQUM7SUFFTSxrQkFBa0IsQ0FBQyxVQUFrQixFQUFFLE1BQW1CO1FBQy9ELElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQ3ZDLENBQUM7SUFFTSxXQUFXLENBQ2hCLFFBQXNFO1FBRXRFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ2hELENBQUM7SUFFTSxnQkFBZ0I7UUFDckIsT0FBTyxTQUFDLHdCQUFVLElBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLEdBQUksQ0FBQTtJQUNsRCxDQUFDO0lBRU0saUJBQWlCO1FBQ3RCLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNwRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEtBQUssVUFBVSxJQUFJLENBQUMsQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFFO2dCQUN2RCxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQTthQUNwQjtZQUNELE9BQU8sRUFBRSxDQUFBO1FBQ1gsQ0FBQyxFQUFFLEVBQWMsQ0FBQyxDQUFBO1FBQ2xCLE9BQU8sU0FBQywwQkFBVyxJQUFDLFFBQVEsRUFBRSxRQUFRLEdBQUksQ0FBQTtJQUM1QyxDQUFDO0lBRU8sWUFBWSxDQUFDLFVBQWtCLEVBQUUsTUFBbUI7UUFDMUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBQ3RDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFBO0lBQ3pELENBQUM7Q0FDRjtBQWxFRCwwREFrRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBldGNoIGZyb20gJ2V0Y2gnXG5pbXBvcnQgKiBhcyBVUEkgZnJvbSAnYXRvbS1oYXNrZWxsLXVwaSdcbmltcG9ydCB7IEVtaXR0ZXIsIERpc3Bvc2FibGUgfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHsgU3RhdHVzSWNvbiB9IGZyb20gJy4vdmlld3Mvc3RhdHVzLWljb24nXG5pbXBvcnQgeyBQcm9ncmVzc0JhciB9IGZyb20gJy4vdmlld3MvcHJvZ3Jlc3MtYmFyJ1xuXG5leHBvcnQgY2xhc3MgQmFja2VuZFN0YXR1c0NvbnRyb2xsZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IHN0YXR1c01hcDogTWFwPHN0cmluZywgVVBJLklTdGF0dXM+ID0gbmV3IE1hcCgpXG4gIHByaXZhdGUgcmVhZG9ubHkgYXdhaXRlcnM6IE1hcDxzdHJpbmcsIFNldDxQcm9taXNlPGFueT4+PiA9IG5ldyBNYXAoKVxuICBwcml2YXRlIHJlYWRvbmx5IGVtaXR0ZXIgPSBuZXcgRW1pdHRlcjxcbiAgICB7fSxcbiAgICB7XG4gICAgICAnZGlkLXVwZGF0ZSc6IHsgcGx1Z2luTmFtZTogc3RyaW5nOyBzdGF0dXM6IFVQSS5JU3RhdHVzIH1cbiAgICB9XG4gID4oKVxuXG4gIHB1YmxpYyBnZXRBd2FpdGVyKHBsdWdpbk5hbWU6IHN0cmluZykge1xuICAgIGxldCBhY3RpdmVBY3Rpb25zVmFyID0gdGhpcy5hd2FpdGVycy5nZXQocGx1Z2luTmFtZSlcbiAgICBpZiAoYWN0aXZlQWN0aW9uc1ZhciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBhY3RpdmVBY3Rpb25zVmFyID0gbmV3IFNldCgpXG4gICAgICB0aGlzLmF3YWl0ZXJzLnNldChwbHVnaW5OYW1lLCBhY3RpdmVBY3Rpb25zVmFyKVxuICAgIH1cbiAgICBjb25zdCBhY3RpdmVBY3Rpb25zID0gYWN0aXZlQWN0aW9uc1ZhclxuICAgIHJldHVybiBhc3luYyA8VCw+KGFjdGlvbjogKCkgPT4gUHJvbWlzZTxUPiB8IFQpOiBQcm9taXNlPFQgfCB2b2lkPiA9PiB7XG4gICAgICBsZXQgcHJvbWlzZVxuICAgICAgdHJ5IHtcbiAgICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oYWN0aW9uKVxuICAgICAgICBhY3RpdmVBY3Rpb25zLmFkZChwcm9taXNlKVxuICAgICAgICB0aGlzLnVwZGF0ZVN0YXR1cyhwbHVnaW5OYW1lLCB7IHN0YXR1czogJ3Byb2dyZXNzJywgZGV0YWlsOiAnJyB9KVxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBwcm9taXNlXG4gICAgICAgIGFjdGl2ZUFjdGlvbnMuZGVsZXRlKHByb21pc2UpXG4gICAgICAgIGlmIChhY3RpdmVBY3Rpb25zLnNpemUgPT09IDApIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXR1cyhwbHVnaW5OYW1lLCB7IHN0YXR1czogJ3JlYWR5JywgZGV0YWlsOiAnJyB9KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHByb21pc2UpIGFjdGl2ZUFjdGlvbnMuZGVsZXRlKHByb21pc2UpXG4gICAgICAgIHRoaXMudXBkYXRlU3RhdHVzKHBsdWdpbk5hbWUsIHsgc3RhdHVzOiAnd2FybmluZycsIGRldGFpbDogYCR7ZX1gIH0pXG4gICAgICAgIGNvbnNvbGUud2FybihlKVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGZvcmNlQmFja2VuZFN0YXR1cyhwbHVnaW5OYW1lOiBzdHJpbmcsIHN0YXR1czogVVBJLklTdGF0dXMpIHtcbiAgICB0aGlzLnVwZGF0ZVN0YXR1cyhwbHVnaW5OYW1lLCBzdGF0dXMpXG4gIH1cblxuICBwdWJsaWMgb25EaWRVcGRhdGUoXG4gICAgY2FsbGJhY2s6ICh2YWx1ZTogeyBwbHVnaW5OYW1lOiBzdHJpbmc7IHN0YXR1czogVVBJLklTdGF0dXMgfSkgPT4gdm9pZCxcbiAgKTogRGlzcG9zYWJsZSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdHRlci5vbignZGlkLXVwZGF0ZScsIGNhbGxiYWNrKVxuICB9XG5cbiAgcHVibGljIHJlbmRlclN0YXR1c0ljb24oKSB7XG4gICAgcmV0dXJuIDxTdGF0dXNJY29uIHN0YXR1c01hcD17dGhpcy5zdGF0dXNNYXB9IC8+XG4gIH1cblxuICBwdWJsaWMgcmVuZGVyUHJvZ3Jlc3NCYXIoKSB7XG4gICAgY29uc3QgcHJvZ3Jlc3MgPSBBcnJheS5mcm9tKHRoaXMuc3RhdHVzTWFwLnZhbHVlcygpKS5yZWR1Y2UoKGN2LCBpKSA9PiB7XG4gICAgICBpZiAoaS5zdGF0dXMgPT09ICdwcm9ncmVzcycgJiYgaS5wcm9ncmVzcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGN2LnB1c2goaS5wcm9ncmVzcylcbiAgICAgIH1cbiAgICAgIHJldHVybiBjdlxuICAgIH0sIFtdIGFzIG51bWJlcltdKVxuICAgIHJldHVybiA8UHJvZ3Jlc3NCYXIgcHJvZ3Jlc3M9e3Byb2dyZXNzfSAvPlxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVTdGF0dXMocGx1Z2luTmFtZTogc3RyaW5nLCBzdGF0dXM6IFVQSS5JU3RhdHVzKSB7XG4gICAgdGhpcy5zdGF0dXNNYXAuc2V0KHBsdWdpbk5hbWUsIHN0YXR1cylcbiAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZGlkLXVwZGF0ZScsIHsgcGx1Z2luTmFtZSwgc3RhdHVzIH0pXG4gIH1cbn1cbiJdfQ==