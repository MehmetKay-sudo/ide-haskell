"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FS = require("fs");
const Temp = require("temp");
const util_run_filter_1 = require("./util-run-filter");
async function makeTempFile(contents) {
    return new Promise((resolve, reject) => {
        Temp.open({ prefix: 'ide-haskell', suffix: '.cabal' }, (err, info) => {
            if (err) {
                console.error(err);
                return reject(err);
            }
            FS.writeSync(info.fd, contents);
            resolve(info);
        });
    });
}
async function read(path) {
    return new Promise((resolve, reject) => {
        FS.readFile(path, { encoding: 'utf-8' }, (error, text) => {
            if (error) {
                console.error(error);
                reject(error);
            }
            else {
                resolve(text);
            }
        });
    });
}
async function format(text, workingDirectory, scope) {
    const { path, fd } = await makeTempFile(text);
    try {
        const command = atom.config.get('ide-haskell.cabalPath', { scope });
        const { stderr } = await util_run_filter_1.runFilter({
            command,
            args: ['format', path],
            cwd: workingDirectory,
        });
        return { stdout: await read(path), stderr };
    }
    finally {
        FS.close(fd, handleErr);
        FS.unlink(path, handleErr);
    }
}
exports.format = format;
function handleErr(err) {
    if (err) {
        atom.notifications.addError(err.name, {
            detail: err.message,
            dismissable: true,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC1jYWJhbC1mb3JtYXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJldHRpZnkvdXRpbC1jYWJhbC1mb3JtYXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5QkFBd0I7QUFDeEIsNkJBQTRCO0FBQzVCLHVEQUE2QztBQUc3QyxLQUFLLFVBQVUsWUFBWSxDQUFDLFFBQWdCO0lBQzFDLE9BQU8sSUFBSSxPQUFPLENBQWdCLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQ3BELElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtZQUNuRSxJQUFJLEdBQUcsRUFBRTtnQkFFUCxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO2dCQUNsQixPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTthQUNuQjtZQUNELEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQTtZQUMvQixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDZixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQUVELEtBQUssVUFBVSxJQUFJLENBQUMsSUFBWTtJQUM5QixPQUFPLElBQUksT0FBTyxDQUFTLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQzdDLEVBQUUsQ0FBQyxRQUFRLENBQ1QsSUFBSSxFQUNKLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxFQUNyQixDQUFDLEtBQXdDLEVBQUUsSUFBSSxFQUFFLEVBQUU7WUFDakQsSUFBSSxLQUFLLEVBQUU7Z0JBRVQsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtnQkFDcEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO2FBQ2Q7aUJBQU07Z0JBQ0wsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO2FBQ2Q7UUFDSCxDQUFDLENBQ0YsQ0FBQTtJQUNILENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQUVNLEtBQUssVUFBVSxNQUFNLENBQzFCLElBQVksRUFDWixnQkFBd0IsRUFDeEIsS0FBZ0M7SUFFaEMsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsR0FBRyxNQUFNLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUM3QyxJQUFJO1FBQ0YsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO1FBQ25FLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxNQUFNLDJCQUFTLENBQUM7WUFDakMsT0FBTztZQUNQLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUM7WUFDdEIsR0FBRyxFQUFFLGdCQUFnQjtTQUN0QixDQUFDLENBQUE7UUFDRixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFBO0tBQzVDO1lBQVM7UUFDUixFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQTtRQUN2QixFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQTtLQUMzQjtBQUNILENBQUM7QUFsQkQsd0JBa0JDO0FBRUQsU0FBUyxTQUFTLENBQUMsR0FBMkI7SUFDNUMsSUFBSSxHQUFHLEVBQUU7UUFDUCxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFO1lBQ3BDLE1BQU0sRUFBRSxHQUFHLENBQUMsT0FBTztZQUNuQixXQUFXLEVBQUUsSUFBSTtTQUNsQixDQUFDLENBQUE7S0FDSDtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBGUyBmcm9tICdmcydcbmltcG9ydCAqIGFzIFRlbXAgZnJvbSAndGVtcCdcbmltcG9ydCB7IHJ1bkZpbHRlciB9IGZyb20gJy4vdXRpbC1ydW4tZmlsdGVyJ1xuaW1wb3J0ICogYXMgQXRvbVR5cGVzIGZyb20gJ2F0b20nXG5cbmFzeW5jIGZ1bmN0aW9uIG1ha2VUZW1wRmlsZShjb250ZW50czogc3RyaW5nKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZTxUZW1wLk9wZW5GaWxlPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgVGVtcC5vcGVuKHsgcHJlZml4OiAnaWRlLWhhc2tlbGwnLCBzdWZmaXg6ICcuY2FiYWwnIH0sIChlcnIsIGluZm8pID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpXG4gICAgICAgIHJldHVybiByZWplY3QoZXJyKVxuICAgICAgfVxuICAgICAgRlMud3JpdGVTeW5jKGluZm8uZmQsIGNvbnRlbnRzKVxuICAgICAgcmVzb2x2ZShpbmZvKVxuICAgIH0pXG4gIH0pXG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlYWQocGF0aDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPHN0cmluZz4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIEZTLnJlYWRGaWxlKFxuICAgICAgcGF0aCxcbiAgICAgIHsgZW5jb2Rpbmc6ICd1dGYtOCcgfSxcbiAgICAgIChlcnJvcjogTm9kZUpTLkVycm5vRXhjZXB0aW9uIHwgdW5kZWZpbmVkLCB0ZXh0KSA9PiB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcilcbiAgICAgICAgICByZWplY3QoZXJyb3IpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZSh0ZXh0KVxuICAgICAgICB9XG4gICAgICB9LFxuICAgIClcbiAgfSlcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZvcm1hdChcbiAgdGV4dDogc3RyaW5nLFxuICB3b3JraW5nRGlyZWN0b3J5OiBzdHJpbmcsXG4gIHNjb3BlOiBBdG9tVHlwZXMuU2NvcGVEZXNjcmlwdG9yLFxuKSB7XG4gIGNvbnN0IHsgcGF0aCwgZmQgfSA9IGF3YWl0IG1ha2VUZW1wRmlsZSh0ZXh0KVxuICB0cnkge1xuICAgIGNvbnN0IGNvbW1hbmQgPSBhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLmNhYmFsUGF0aCcsIHsgc2NvcGUgfSlcbiAgICBjb25zdCB7IHN0ZGVyciB9ID0gYXdhaXQgcnVuRmlsdGVyKHtcbiAgICAgIGNvbW1hbmQsXG4gICAgICBhcmdzOiBbJ2Zvcm1hdCcsIHBhdGhdLFxuICAgICAgY3dkOiB3b3JraW5nRGlyZWN0b3J5LFxuICAgIH0pXG4gICAgcmV0dXJuIHsgc3Rkb3V0OiBhd2FpdCByZWFkKHBhdGgpLCBzdGRlcnIgfVxuICB9IGZpbmFsbHkge1xuICAgIEZTLmNsb3NlKGZkLCBoYW5kbGVFcnIpXG4gICAgRlMudW5saW5rKHBhdGgsIGhhbmRsZUVycilcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVFcnIoZXJyPzogTm9kZUpTLkVycm5vRXhjZXB0aW9uKTogdm9pZCB7XG4gIGlmIChlcnIpIHtcbiAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkRXJyb3IoZXJyLm5hbWUsIHtcbiAgICAgIGRldGFpbDogZXJyLm1lc3NhZ2UsXG4gICAgICBkaXNtaXNzYWJsZTogdHJ1ZSxcbiAgICB9KVxuICB9XG59XG4iXX0=